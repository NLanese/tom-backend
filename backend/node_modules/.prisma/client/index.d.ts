
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  role: Role
  firstname: string
  lastname: string
  username: string
  email: string
  password: string
  fico: number | null
  netradyne: number | null
  da: number | null
  seatbelt: boolean | null
  speeding: boolean | null
  defects: number | null
  cdf: number | null
  dar: number | null
  dcr: number | null
  pod: number | null
  cc: number | null
  sc: number | null
  has_many_accidents: number | null
  belongs_to_team: boolean | null
  attendance: Prisma.JsonValue | null
  productivity: Prisma.JsonValue | null
}

/**
 * Model Accident
 * 
 */
export type Accident = {
  id: number
  userId: number
  using_safety: boolean | null
  safety_failed: boolean | null
  number_package_carried: number | null
  safety_equipment_used: Prisma.JsonValue | null
  failed_safety: boolean | null
}

/**
 * Model HitPerson
 * 
 */
export type HitPerson = {
  id: number
  accidentId: number
  medical_attention: boolean
  vehicle_or_pedestrian: string
  previous_damage: string
  contact_infomation: Prisma.JsonValue
  injury: string
}

/**
 * Model ThirdParty
 * 
 */
export type ThirdParty = {
  id: number
  accidentId: number
  location: string
}

/**
 * Model InjuryAccident
 * 
 */
export type InjuryAccident = {
  id: number
  self_injured: boolean
  vehicle_number: string
  amazon_logo: boolean
  exact_address: string
  action_before_accident: Prisma.JsonValue
  police_report: Prisma.JsonValue
  weather: string
  wet_ground: boolean
  slippery_ground: boolean
  extra_info: string
  rushed_prior: boolean
  accidentId: number
}

/**
 * Model PropertyAccident
 * 
 */
export type PropertyAccident = {
  id: number
  self_injured: boolean
  vehicle_number: string
  amazon_logo: boolean
  exact_address: string
  action_before_accident: Prisma.JsonValue
  police_report: Prisma.JsonValue
  weather: string
  wet_ground: boolean
  slippery_ground: boolean
  extra_info: string
  rushed_prior: boolean
  accidentId: number
}

/**
 * Model InjuryReport
 * 
 */
export type InjuryReport = {
  id: number
  immediate_attention: boolean
  late: Prisma.JsonValue
  self_injured: boolean
  injury_type: Prisma.JsonValue
  other_injured: boolean
  before_injury: string
  packages: Prisma.JsonValue
  safety_equipment: Prisma.JsonValue
  unsafe_conditions: Prisma.JsonValue
  pain_level: number
  addtional_information: string
  accidentId: number
}

/**
 * Model Image
 * 
 */
export type Image = {
  id: number
  fieldname: string
  path: string
  mimetype: string
  size: number
  originalname: string
  encoding: string
  destination: string
  filename: string
  injuryAccidentId: number
  hitPersonId: number
  propertyAccidentId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.accident`: Exposes CRUD operations for the **Accident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accidents
    * const accidents = await prisma.accident.findMany()
    * ```
    */
  get accident(): Prisma.AccidentDelegate<GlobalReject>;

  /**
   * `prisma.hitPerson`: Exposes CRUD operations for the **HitPerson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HitPeople
    * const hitPeople = await prisma.hitPerson.findMany()
    * ```
    */
  get hitPerson(): Prisma.HitPersonDelegate<GlobalReject>;

  /**
   * `prisma.thirdParty`: Exposes CRUD operations for the **ThirdParty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThirdParties
    * const thirdParties = await prisma.thirdParty.findMany()
    * ```
    */
  get thirdParty(): Prisma.ThirdPartyDelegate<GlobalReject>;

  /**
   * `prisma.injuryAccident`: Exposes CRUD operations for the **InjuryAccident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InjuryAccidents
    * const injuryAccidents = await prisma.injuryAccident.findMany()
    * ```
    */
  get injuryAccident(): Prisma.InjuryAccidentDelegate<GlobalReject>;

  /**
   * `prisma.propertyAccident`: Exposes CRUD operations for the **PropertyAccident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropertyAccidents
    * const propertyAccidents = await prisma.propertyAccident.findMany()
    * ```
    */
  get propertyAccident(): Prisma.PropertyAccidentDelegate<GlobalReject>;

  /**
   * `prisma.injuryReport`: Exposes CRUD operations for the **InjuryReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InjuryReports
    * const injuryReports = await prisma.injuryReport.findMany()
    * ```
    */
  get injuryReport(): Prisma.InjuryReportDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.6.0
   * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Accident: 'Accident',
    HitPerson: 'HitPerson',
    ThirdParty: 'ThirdParty',
    InjuryAccident: 'InjuryAccident',
    PropertyAccident: 'PropertyAccident',
    InjuryReport: 'InjuryReport',
    Image: 'Image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    accidents: number
  }

  export type UserCountOutputTypeSelect = {
    accidents?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AccidentCountOutputType
   */


  export type AccidentCountOutputType = {
    hitPerson: number
    thirdParty: number
    injuryAccident: number
    propertyAccident: number
    injuryReport: number
  }

  export type AccidentCountOutputTypeSelect = {
    hitPerson?: boolean
    thirdParty?: boolean
    injuryAccident?: boolean
    propertyAccident?: boolean
    injuryReport?: boolean
  }

  export type AccidentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AccidentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AccidentCountOutputType
    : S extends undefined
    ? never
    : S extends AccidentCountOutputTypeArgs
    ?'include' extends U
    ? AccidentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AccidentCountOutputType ?AccidentCountOutputType [P]
  : 
     never
  } 
    : AccidentCountOutputType
  : AccidentCountOutputType




  // Custom InputTypes

  /**
   * AccidentCountOutputType without action
   */
  export type AccidentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AccidentCountOutputType
     * 
    **/
    select?: AccidentCountOutputTypeSelect | null
  }



  /**
   * Count Type HitPersonCountOutputType
   */


  export type HitPersonCountOutputType = {
    accident: number
    accident_pictures: number
  }

  export type HitPersonCountOutputTypeSelect = {
    accident?: boolean
    accident_pictures?: boolean
  }

  export type HitPersonCountOutputTypeGetPayload<
    S extends boolean | null | undefined | HitPersonCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? HitPersonCountOutputType
    : S extends undefined
    ? never
    : S extends HitPersonCountOutputTypeArgs
    ?'include' extends U
    ? HitPersonCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof HitPersonCountOutputType ?HitPersonCountOutputType [P]
  : 
     never
  } 
    : HitPersonCountOutputType
  : HitPersonCountOutputType




  // Custom InputTypes

  /**
   * HitPersonCountOutputType without action
   */
  export type HitPersonCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HitPersonCountOutputType
     * 
    **/
    select?: HitPersonCountOutputTypeSelect | null
  }



  /**
   * Count Type ThirdPartyCountOutputType
   */


  export type ThirdPartyCountOutputType = {
    accident: number
  }

  export type ThirdPartyCountOutputTypeSelect = {
    accident?: boolean
  }

  export type ThirdPartyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ThirdPartyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ThirdPartyCountOutputType
    : S extends undefined
    ? never
    : S extends ThirdPartyCountOutputTypeArgs
    ?'include' extends U
    ? ThirdPartyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ThirdPartyCountOutputType ?ThirdPartyCountOutputType [P]
  : 
     never
  } 
    : ThirdPartyCountOutputType
  : ThirdPartyCountOutputType




  // Custom InputTypes

  /**
   * ThirdPartyCountOutputType without action
   */
  export type ThirdPartyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ThirdPartyCountOutputType
     * 
    **/
    select?: ThirdPartyCountOutputTypeSelect | null
  }



  /**
   * Count Type InjuryAccidentCountOutputType
   */


  export type InjuryAccidentCountOutputType = {
    accident_pictures: number
    accident: number
  }

  export type InjuryAccidentCountOutputTypeSelect = {
    accident_pictures?: boolean
    accident?: boolean
  }

  export type InjuryAccidentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InjuryAccidentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InjuryAccidentCountOutputType
    : S extends undefined
    ? never
    : S extends InjuryAccidentCountOutputTypeArgs
    ?'include' extends U
    ? InjuryAccidentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InjuryAccidentCountOutputType ?InjuryAccidentCountOutputType [P]
  : 
     never
  } 
    : InjuryAccidentCountOutputType
  : InjuryAccidentCountOutputType




  // Custom InputTypes

  /**
   * InjuryAccidentCountOutputType without action
   */
  export type InjuryAccidentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccidentCountOutputType
     * 
    **/
    select?: InjuryAccidentCountOutputTypeSelect | null
  }



  /**
   * Count Type PropertyAccidentCountOutputType
   */


  export type PropertyAccidentCountOutputType = {
    accident_pictures: number
    accident: number
  }

  export type PropertyAccidentCountOutputTypeSelect = {
    accident_pictures?: boolean
    accident?: boolean
  }

  export type PropertyAccidentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PropertyAccidentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PropertyAccidentCountOutputType
    : S extends undefined
    ? never
    : S extends PropertyAccidentCountOutputTypeArgs
    ?'include' extends U
    ? PropertyAccidentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PropertyAccidentCountOutputType ?PropertyAccidentCountOutputType [P]
  : 
     never
  } 
    : PropertyAccidentCountOutputType
  : PropertyAccidentCountOutputType




  // Custom InputTypes

  /**
   * PropertyAccidentCountOutputType without action
   */
  export type PropertyAccidentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccidentCountOutputType
     * 
    **/
    select?: PropertyAccidentCountOutputTypeSelect | null
  }



  /**
   * Count Type InjuryReportCountOutputType
   */


  export type InjuryReportCountOutputType = {
    accident: number
  }

  export type InjuryReportCountOutputTypeSelect = {
    accident?: boolean
  }

  export type InjuryReportCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InjuryReportCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InjuryReportCountOutputType
    : S extends undefined
    ? never
    : S extends InjuryReportCountOutputTypeArgs
    ?'include' extends U
    ? InjuryReportCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InjuryReportCountOutputType ?InjuryReportCountOutputType [P]
  : 
     never
  } 
    : InjuryReportCountOutputType
  : InjuryReportCountOutputType




  // Custom InputTypes

  /**
   * InjuryReportCountOutputType without action
   */
  export type InjuryReportCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InjuryReportCountOutputType
     * 
    **/
    select?: InjuryReportCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    fico: number | null
    netradyne: number | null
    da: number | null
    defects: number | null
    cdf: number | null
    dar: number | null
    dcr: number | null
    pod: number | null
    cc: number | null
    sc: number | null
    has_many_accidents: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    fico: number | null
    netradyne: number | null
    da: number | null
    defects: number | null
    cdf: number | null
    dar: number | null
    dcr: number | null
    pod: number | null
    cc: number | null
    sc: number | null
    has_many_accidents: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    role: Role | null
    firstname: string | null
    lastname: string | null
    username: string | null
    email: string | null
    password: string | null
    fico: number | null
    netradyne: number | null
    da: number | null
    seatbelt: boolean | null
    speeding: boolean | null
    defects: number | null
    cdf: number | null
    dar: number | null
    dcr: number | null
    pod: number | null
    cc: number | null
    sc: number | null
    has_many_accidents: number | null
    belongs_to_team: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    role: Role | null
    firstname: string | null
    lastname: string | null
    username: string | null
    email: string | null
    password: string | null
    fico: number | null
    netradyne: number | null
    da: number | null
    seatbelt: boolean | null
    speeding: boolean | null
    defects: number | null
    cdf: number | null
    dar: number | null
    dcr: number | null
    pod: number | null
    cc: number | null
    sc: number | null
    has_many_accidents: number | null
    belongs_to_team: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    role: number
    firstname: number
    lastname: number
    username: number
    email: number
    password: number
    fico: number
    netradyne: number
    da: number
    seatbelt: number
    speeding: number
    defects: number
    cdf: number
    dar: number
    dcr: number
    pod: number
    cc: number
    sc: number
    has_many_accidents: number
    belongs_to_team: number
    attendance: number
    productivity: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    fico?: true
    netradyne?: true
    da?: true
    defects?: true
    cdf?: true
    dar?: true
    dcr?: true
    pod?: true
    cc?: true
    sc?: true
    has_many_accidents?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    fico?: true
    netradyne?: true
    da?: true
    defects?: true
    cdf?: true
    dar?: true
    dcr?: true
    pod?: true
    cc?: true
    sc?: true
    has_many_accidents?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    role?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    fico?: true
    netradyne?: true
    da?: true
    seatbelt?: true
    speeding?: true
    defects?: true
    cdf?: true
    dar?: true
    dcr?: true
    pod?: true
    cc?: true
    sc?: true
    has_many_accidents?: true
    belongs_to_team?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    role?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    fico?: true
    netradyne?: true
    da?: true
    seatbelt?: true
    speeding?: true
    defects?: true
    cdf?: true
    dar?: true
    dcr?: true
    pod?: true
    cc?: true
    sc?: true
    has_many_accidents?: true
    belongs_to_team?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    role?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    fico?: true
    netradyne?: true
    da?: true
    seatbelt?: true
    speeding?: true
    defects?: true
    cdf?: true
    dar?: true
    dcr?: true
    pod?: true
    cc?: true
    sc?: true
    has_many_accidents?: true
    belongs_to_team?: true
    attendance?: true
    productivity?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    role: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico: number | null
    netradyne: number | null
    da: number | null
    seatbelt: boolean | null
    speeding: boolean | null
    defects: number | null
    cdf: number | null
    dar: number | null
    dcr: number | null
    pod: number | null
    cc: number | null
    sc: number | null
    has_many_accidents: number | null
    belongs_to_team: boolean | null
    attendance: JsonValue | null
    productivity: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    role?: boolean
    firstname?: boolean
    lastname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    fico?: boolean
    netradyne?: boolean
    da?: boolean
    seatbelt?: boolean
    speeding?: boolean
    defects?: boolean
    cdf?: boolean
    dar?: boolean
    dcr?: boolean
    pod?: boolean
    cc?: boolean
    sc?: boolean
    has_many_accidents?: boolean
    belongs_to_team?: boolean
    attendance?: boolean
    productivity?: boolean
    accidents?: boolean | AccidentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    accidents?: boolean | AccidentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accidents'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'accidents'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accidents<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Accident
   */


  export type AggregateAccident = {
    _count: AccidentCountAggregateOutputType | null
    _avg: AccidentAvgAggregateOutputType | null
    _sum: AccidentSumAggregateOutputType | null
    _min: AccidentMinAggregateOutputType | null
    _max: AccidentMaxAggregateOutputType | null
  }

  export type AccidentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    number_package_carried: number | null
  }

  export type AccidentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    number_package_carried: number | null
  }

  export type AccidentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    using_safety: boolean | null
    safety_failed: boolean | null
    number_package_carried: number | null
    failed_safety: boolean | null
  }

  export type AccidentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    using_safety: boolean | null
    safety_failed: boolean | null
    number_package_carried: number | null
    failed_safety: boolean | null
  }

  export type AccidentCountAggregateOutputType = {
    id: number
    userId: number
    using_safety: number
    safety_failed: number
    number_package_carried: number
    safety_equipment_used: number
    failed_safety: number
    _all: number
  }


  export type AccidentAvgAggregateInputType = {
    id?: true
    userId?: true
    number_package_carried?: true
  }

  export type AccidentSumAggregateInputType = {
    id?: true
    userId?: true
    number_package_carried?: true
  }

  export type AccidentMinAggregateInputType = {
    id?: true
    userId?: true
    using_safety?: true
    safety_failed?: true
    number_package_carried?: true
    failed_safety?: true
  }

  export type AccidentMaxAggregateInputType = {
    id?: true
    userId?: true
    using_safety?: true
    safety_failed?: true
    number_package_carried?: true
    failed_safety?: true
  }

  export type AccidentCountAggregateInputType = {
    id?: true
    userId?: true
    using_safety?: true
    safety_failed?: true
    number_package_carried?: true
    safety_equipment_used?: true
    failed_safety?: true
    _all?: true
  }

  export type AccidentAggregateArgs = {
    /**
     * Filter which Accident to aggregate.
     * 
    **/
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     * 
    **/
    orderBy?: Enumerable<AccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accidents
    **/
    _count?: true | AccidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccidentMaxAggregateInputType
  }

  export type GetAccidentAggregateType<T extends AccidentAggregateArgs> = {
        [P in keyof T & keyof AggregateAccident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccident[P]>
      : GetScalarType<T[P], AggregateAccident[P]>
  }




  export type AccidentGroupByArgs = {
    where?: AccidentWhereInput
    orderBy?: Enumerable<AccidentOrderByWithAggregationInput>
    by: Array<AccidentScalarFieldEnum>
    having?: AccidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccidentCountAggregateInputType | true
    _avg?: AccidentAvgAggregateInputType
    _sum?: AccidentSumAggregateInputType
    _min?: AccidentMinAggregateInputType
    _max?: AccidentMaxAggregateInputType
  }


  export type AccidentGroupByOutputType = {
    id: number
    userId: number
    using_safety: boolean | null
    safety_failed: boolean | null
    number_package_carried: number | null
    safety_equipment_used: JsonValue | null
    failed_safety: boolean | null
    _count: AccidentCountAggregateOutputType | null
    _avg: AccidentAvgAggregateOutputType | null
    _sum: AccidentSumAggregateOutputType | null
    _min: AccidentMinAggregateOutputType | null
    _max: AccidentMaxAggregateOutputType | null
  }

  type GetAccidentGroupByPayload<T extends AccidentGroupByArgs> = Promise<
    Array<
      PickArray<AccidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccidentGroupByOutputType[P]>
            : GetScalarType<T[P], AccidentGroupByOutputType[P]>
        }
      >
    >


  export type AccidentSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    using_safety?: boolean
    safety_failed?: boolean
    number_package_carried?: boolean
    safety_equipment_used?: boolean
    failed_safety?: boolean
    hitPerson?: boolean | HitPersonFindManyArgs
    thirdParty?: boolean | ThirdPartyFindManyArgs
    injuryAccident?: boolean | InjuryAccidentFindManyArgs
    propertyAccident?: boolean | PropertyAccidentFindManyArgs
    injuryReport?: boolean | InjuryReportFindManyArgs
    _count?: boolean | AccidentCountOutputTypeArgs
  }

  export type AccidentInclude = {
    user?: boolean | UserArgs
    hitPerson?: boolean | HitPersonFindManyArgs
    thirdParty?: boolean | ThirdPartyFindManyArgs
    injuryAccident?: boolean | InjuryAccidentFindManyArgs
    propertyAccident?: boolean | PropertyAccidentFindManyArgs
    injuryReport?: boolean | InjuryReportFindManyArgs
    _count?: boolean | AccidentCountOutputTypeArgs
  }

  export type AccidentGetPayload<
    S extends boolean | null | undefined | AccidentArgs,
    U = keyof S
      > = S extends true
        ? Accident
    : S extends undefined
    ? never
    : S extends AccidentArgs | AccidentFindManyArgs
    ?'include' extends U
    ? Accident  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'hitPerson'
        ? Array < HitPersonGetPayload<S['include'][P]>>  :
        P extends 'thirdParty'
        ? Array < ThirdPartyGetPayload<S['include'][P]>>  :
        P extends 'injuryAccident'
        ? Array < InjuryAccidentGetPayload<S['include'][P]>>  :
        P extends 'propertyAccident'
        ? Array < PropertyAccidentGetPayload<S['include'][P]>>  :
        P extends 'injuryReport'
        ? Array < InjuryReportGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? AccidentCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Accident ?Accident [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'hitPerson'
        ? Array < HitPersonGetPayload<S['select'][P]>>  :
        P extends 'thirdParty'
        ? Array < ThirdPartyGetPayload<S['select'][P]>>  :
        P extends 'injuryAccident'
        ? Array < InjuryAccidentGetPayload<S['select'][P]>>  :
        P extends 'propertyAccident'
        ? Array < PropertyAccidentGetPayload<S['select'][P]>>  :
        P extends 'injuryReport'
        ? Array < InjuryReportGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? AccidentCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Accident
  : Accident


  type AccidentCountArgs = Merge<
    Omit<AccidentFindManyArgs, 'select' | 'include'> & {
      select?: AccidentCountAggregateInputType | true
    }
  >

  export interface AccidentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Accident that matches the filter.
     * @param {AccidentFindUniqueArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccidentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccidentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Accident'> extends True ? CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>> : CheckSelect<T, Prisma__AccidentClient<Accident | null >, Prisma__AccidentClient<AccidentGetPayload<T> | null >>

    /**
     * Find the first Accident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentFindFirstArgs} args - Arguments to find a Accident
     * @example
     * // Get one Accident
     * const accident = await prisma.accident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccidentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccidentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Accident'> extends True ? CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>> : CheckSelect<T, Prisma__AccidentClient<Accident | null >, Prisma__AccidentClient<AccidentGetPayload<T> | null >>

    /**
     * Find zero or more Accidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accidents
     * const accidents = await prisma.accident.findMany()
     * 
     * // Get first 10 Accidents
     * const accidents = await prisma.accident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accidentWithIdOnly = await prisma.accident.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccidentFindManyArgs>(
      args?: SelectSubset<T, AccidentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>

    /**
     * Create a Accident.
     * @param {AccidentCreateArgs} args - Arguments to create a Accident.
     * @example
     * // Create one Accident
     * const Accident = await prisma.accident.create({
     *   data: {
     *     // ... data to create a Accident
     *   }
     * })
     * 
    **/
    create<T extends AccidentCreateArgs>(
      args: SelectSubset<T, AccidentCreateArgs>
    ): CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>>

    /**
     * Create many Accidents.
     *     @param {AccidentCreateManyArgs} args - Arguments to create many Accidents.
     *     @example
     *     // Create many Accidents
     *     const accident = await prisma.accident.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccidentCreateManyArgs>(
      args?: SelectSubset<T, AccidentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Accident.
     * @param {AccidentDeleteArgs} args - Arguments to delete one Accident.
     * @example
     * // Delete one Accident
     * const Accident = await prisma.accident.delete({
     *   where: {
     *     // ... filter to delete one Accident
     *   }
     * })
     * 
    **/
    delete<T extends AccidentDeleteArgs>(
      args: SelectSubset<T, AccidentDeleteArgs>
    ): CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>>

    /**
     * Update one Accident.
     * @param {AccidentUpdateArgs} args - Arguments to update one Accident.
     * @example
     * // Update one Accident
     * const accident = await prisma.accident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccidentUpdateArgs>(
      args: SelectSubset<T, AccidentUpdateArgs>
    ): CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>>

    /**
     * Delete zero or more Accidents.
     * @param {AccidentDeleteManyArgs} args - Arguments to filter Accidents to delete.
     * @example
     * // Delete a few Accidents
     * const { count } = await prisma.accident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccidentDeleteManyArgs>(
      args?: SelectSubset<T, AccidentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accidents
     * const accident = await prisma.accident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccidentUpdateManyArgs>(
      args: SelectSubset<T, AccidentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Accident.
     * @param {AccidentUpsertArgs} args - Arguments to update or create a Accident.
     * @example
     * // Update or create a Accident
     * const accident = await prisma.accident.upsert({
     *   create: {
     *     // ... data to create a Accident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Accident we want to update
     *   }
     * })
    **/
    upsert<T extends AccidentUpsertArgs>(
      args: SelectSubset<T, AccidentUpsertArgs>
    ): CheckSelect<T, Prisma__AccidentClient<Accident>, Prisma__AccidentClient<AccidentGetPayload<T>>>

    /**
     * Count the number of Accidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentCountArgs} args - Arguments to filter Accidents to count.
     * @example
     * // Count the number of Accidents
     * const count = await prisma.accident.count({
     *   where: {
     *     // ... the filter for the Accidents we want to count
     *   }
     * })
    **/
    count<T extends AccidentCountArgs>(
      args?: Subset<T, AccidentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Accident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccidentAggregateArgs>(args: Subset<T, AccidentAggregateArgs>): PrismaPromise<GetAccidentAggregateType<T>>

    /**
     * Group by Accident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccidentGroupByArgs['orderBy'] }
        : { orderBy?: AccidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccidentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Accident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccidentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    hitPerson<T extends HitPersonFindManyArgs = {}>(args?: Subset<T, HitPersonFindManyArgs>): CheckSelect<T, PrismaPromise<Array<HitPerson>>, PrismaPromise<Array<HitPersonGetPayload<T>>>>;

    thirdParty<T extends ThirdPartyFindManyArgs = {}>(args?: Subset<T, ThirdPartyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ThirdParty>>, PrismaPromise<Array<ThirdPartyGetPayload<T>>>>;

    injuryAccident<T extends InjuryAccidentFindManyArgs = {}>(args?: Subset<T, InjuryAccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InjuryAccident>>, PrismaPromise<Array<InjuryAccidentGetPayload<T>>>>;

    propertyAccident<T extends PropertyAccidentFindManyArgs = {}>(args?: Subset<T, PropertyAccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PropertyAccident>>, PrismaPromise<Array<PropertyAccidentGetPayload<T>>>>;

    injuryReport<T extends InjuryReportFindManyArgs = {}>(args?: Subset<T, InjuryReportFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InjuryReport>>, PrismaPromise<Array<InjuryReportGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Accident findUnique
   */
  export type AccidentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * Throw an Error if a Accident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Accident to fetch.
     * 
    **/
    where: AccidentWhereUniqueInput
  }


  /**
   * Accident findFirst
   */
  export type AccidentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * Throw an Error if a Accident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Accident to fetch.
     * 
    **/
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     * 
    **/
    orderBy?: Enumerable<AccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accidents.
     * 
    **/
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accidents.
     * 
    **/
    distinct?: Enumerable<AccidentScalarFieldEnum>
  }


  /**
   * Accident findMany
   */
  export type AccidentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * Filter, which Accidents to fetch.
     * 
    **/
    where?: AccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accidents to fetch.
     * 
    **/
    orderBy?: Enumerable<AccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accidents.
     * 
    **/
    cursor?: AccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accidents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccidentScalarFieldEnum>
  }


  /**
   * Accident create
   */
  export type AccidentCreateArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * The data needed to create a Accident.
     * 
    **/
    data: XOR<AccidentCreateInput, AccidentUncheckedCreateInput>
  }


  /**
   * Accident createMany
   */
  export type AccidentCreateManyArgs = {
    data: Enumerable<AccidentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Accident update
   */
  export type AccidentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * The data needed to update a Accident.
     * 
    **/
    data: XOR<AccidentUpdateInput, AccidentUncheckedUpdateInput>
    /**
     * Choose, which Accident to update.
     * 
    **/
    where: AccidentWhereUniqueInput
  }


  /**
   * Accident updateMany
   */
  export type AccidentUpdateManyArgs = {
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyInput>
    where?: AccidentWhereInput
  }


  /**
   * Accident upsert
   */
  export type AccidentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * The filter to search for the Accident to update in case it exists.
     * 
    **/
    where: AccidentWhereUniqueInput
    /**
     * In case the Accident found by the `where` argument doesn't exist, create a new Accident with this data.
     * 
    **/
    create: XOR<AccidentCreateInput, AccidentUncheckedCreateInput>
    /**
     * In case the Accident was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccidentUpdateInput, AccidentUncheckedUpdateInput>
  }


  /**
   * Accident delete
   */
  export type AccidentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
    /**
     * Filter which Accident to delete.
     * 
    **/
    where: AccidentWhereUniqueInput
  }


  /**
   * Accident deleteMany
   */
  export type AccidentDeleteManyArgs = {
    where?: AccidentWhereInput
  }


  /**
   * Accident without action
   */
  export type AccidentArgs = {
    /**
     * Select specific fields to fetch from the Accident
     * 
    **/
    select?: AccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccidentInclude | null
  }



  /**
   * Model HitPerson
   */


  export type AggregateHitPerson = {
    _count: HitPersonCountAggregateOutputType | null
    _avg: HitPersonAvgAggregateOutputType | null
    _sum: HitPersonSumAggregateOutputType | null
    _min: HitPersonMinAggregateOutputType | null
    _max: HitPersonMaxAggregateOutputType | null
  }

  export type HitPersonAvgAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type HitPersonSumAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type HitPersonMinAggregateOutputType = {
    id: number | null
    accidentId: number | null
    medical_attention: boolean | null
    vehicle_or_pedestrian: string | null
    previous_damage: string | null
    injury: string | null
  }

  export type HitPersonMaxAggregateOutputType = {
    id: number | null
    accidentId: number | null
    medical_attention: boolean | null
    vehicle_or_pedestrian: string | null
    previous_damage: string | null
    injury: string | null
  }

  export type HitPersonCountAggregateOutputType = {
    id: number
    accidentId: number
    medical_attention: number
    vehicle_or_pedestrian: number
    previous_damage: number
    contact_infomation: number
    injury: number
    _all: number
  }


  export type HitPersonAvgAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type HitPersonSumAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type HitPersonMinAggregateInputType = {
    id?: true
    accidentId?: true
    medical_attention?: true
    vehicle_or_pedestrian?: true
    previous_damage?: true
    injury?: true
  }

  export type HitPersonMaxAggregateInputType = {
    id?: true
    accidentId?: true
    medical_attention?: true
    vehicle_or_pedestrian?: true
    previous_damage?: true
    injury?: true
  }

  export type HitPersonCountAggregateInputType = {
    id?: true
    accidentId?: true
    medical_attention?: true
    vehicle_or_pedestrian?: true
    previous_damage?: true
    contact_infomation?: true
    injury?: true
    _all?: true
  }

  export type HitPersonAggregateArgs = {
    /**
     * Filter which HitPerson to aggregate.
     * 
    **/
    where?: HitPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HitPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<HitPersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: HitPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HitPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HitPeople.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HitPeople
    **/
    _count?: true | HitPersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HitPersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HitPersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HitPersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HitPersonMaxAggregateInputType
  }

  export type GetHitPersonAggregateType<T extends HitPersonAggregateArgs> = {
        [P in keyof T & keyof AggregateHitPerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHitPerson[P]>
      : GetScalarType<T[P], AggregateHitPerson[P]>
  }




  export type HitPersonGroupByArgs = {
    where?: HitPersonWhereInput
    orderBy?: Enumerable<HitPersonOrderByWithAggregationInput>
    by: Array<HitPersonScalarFieldEnum>
    having?: HitPersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HitPersonCountAggregateInputType | true
    _avg?: HitPersonAvgAggregateInputType
    _sum?: HitPersonSumAggregateInputType
    _min?: HitPersonMinAggregateInputType
    _max?: HitPersonMaxAggregateInputType
  }


  export type HitPersonGroupByOutputType = {
    id: number
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonValue
    injury: string
    _count: HitPersonCountAggregateOutputType | null
    _avg: HitPersonAvgAggregateOutputType | null
    _sum: HitPersonSumAggregateOutputType | null
    _min: HitPersonMinAggregateOutputType | null
    _max: HitPersonMaxAggregateOutputType | null
  }

  type GetHitPersonGroupByPayload<T extends HitPersonGroupByArgs> = Promise<
    Array<
      PickArray<HitPersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HitPersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HitPersonGroupByOutputType[P]>
            : GetScalarType<T[P], HitPersonGroupByOutputType[P]>
        }
      >
    >


  export type HitPersonSelect = {
    id?: boolean
    accidentId?: boolean
    accident?: boolean | AccidentFindManyArgs
    medical_attention?: boolean
    vehicle_or_pedestrian?: boolean
    previous_damage?: boolean
    contact_infomation?: boolean
    injury?: boolean
    accident_pictures?: boolean | ImageFindManyArgs
    _count?: boolean | HitPersonCountOutputTypeArgs
  }

  export type HitPersonInclude = {
    accident?: boolean | AccidentFindManyArgs
    accident_pictures?: boolean | ImageFindManyArgs
    _count?: boolean | HitPersonCountOutputTypeArgs
  }

  export type HitPersonGetPayload<
    S extends boolean | null | undefined | HitPersonArgs,
    U = keyof S
      > = S extends true
        ? HitPerson
    : S extends undefined
    ? never
    : S extends HitPersonArgs | HitPersonFindManyArgs
    ?'include' extends U
    ? HitPerson  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? HitPersonCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof HitPerson ?HitPerson [P]
  : 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? HitPersonCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : HitPerson
  : HitPerson


  type HitPersonCountArgs = Merge<
    Omit<HitPersonFindManyArgs, 'select' | 'include'> & {
      select?: HitPersonCountAggregateInputType | true
    }
  >

  export interface HitPersonDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one HitPerson that matches the filter.
     * @param {HitPersonFindUniqueArgs} args - Arguments to find a HitPerson
     * @example
     * // Get one HitPerson
     * const hitPerson = await prisma.hitPerson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HitPersonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HitPersonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HitPerson'> extends True ? CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>> : CheckSelect<T, Prisma__HitPersonClient<HitPerson | null >, Prisma__HitPersonClient<HitPersonGetPayload<T> | null >>

    /**
     * Find the first HitPerson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonFindFirstArgs} args - Arguments to find a HitPerson
     * @example
     * // Get one HitPerson
     * const hitPerson = await prisma.hitPerson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HitPersonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HitPersonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HitPerson'> extends True ? CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>> : CheckSelect<T, Prisma__HitPersonClient<HitPerson | null >, Prisma__HitPersonClient<HitPersonGetPayload<T> | null >>

    /**
     * Find zero or more HitPeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HitPeople
     * const hitPeople = await prisma.hitPerson.findMany()
     * 
     * // Get first 10 HitPeople
     * const hitPeople = await prisma.hitPerson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hitPersonWithIdOnly = await prisma.hitPerson.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HitPersonFindManyArgs>(
      args?: SelectSubset<T, HitPersonFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<HitPerson>>, PrismaPromise<Array<HitPersonGetPayload<T>>>>

    /**
     * Create a HitPerson.
     * @param {HitPersonCreateArgs} args - Arguments to create a HitPerson.
     * @example
     * // Create one HitPerson
     * const HitPerson = await prisma.hitPerson.create({
     *   data: {
     *     // ... data to create a HitPerson
     *   }
     * })
     * 
    **/
    create<T extends HitPersonCreateArgs>(
      args: SelectSubset<T, HitPersonCreateArgs>
    ): CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>>

    /**
     * Create many HitPeople.
     *     @param {HitPersonCreateManyArgs} args - Arguments to create many HitPeople.
     *     @example
     *     // Create many HitPeople
     *     const hitPerson = await prisma.hitPerson.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HitPersonCreateManyArgs>(
      args?: SelectSubset<T, HitPersonCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a HitPerson.
     * @param {HitPersonDeleteArgs} args - Arguments to delete one HitPerson.
     * @example
     * // Delete one HitPerson
     * const HitPerson = await prisma.hitPerson.delete({
     *   where: {
     *     // ... filter to delete one HitPerson
     *   }
     * })
     * 
    **/
    delete<T extends HitPersonDeleteArgs>(
      args: SelectSubset<T, HitPersonDeleteArgs>
    ): CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>>

    /**
     * Update one HitPerson.
     * @param {HitPersonUpdateArgs} args - Arguments to update one HitPerson.
     * @example
     * // Update one HitPerson
     * const hitPerson = await prisma.hitPerson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HitPersonUpdateArgs>(
      args: SelectSubset<T, HitPersonUpdateArgs>
    ): CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>>

    /**
     * Delete zero or more HitPeople.
     * @param {HitPersonDeleteManyArgs} args - Arguments to filter HitPeople to delete.
     * @example
     * // Delete a few HitPeople
     * const { count } = await prisma.hitPerson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HitPersonDeleteManyArgs>(
      args?: SelectSubset<T, HitPersonDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more HitPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HitPeople
     * const hitPerson = await prisma.hitPerson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HitPersonUpdateManyArgs>(
      args: SelectSubset<T, HitPersonUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one HitPerson.
     * @param {HitPersonUpsertArgs} args - Arguments to update or create a HitPerson.
     * @example
     * // Update or create a HitPerson
     * const hitPerson = await prisma.hitPerson.upsert({
     *   create: {
     *     // ... data to create a HitPerson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HitPerson we want to update
     *   }
     * })
    **/
    upsert<T extends HitPersonUpsertArgs>(
      args: SelectSubset<T, HitPersonUpsertArgs>
    ): CheckSelect<T, Prisma__HitPersonClient<HitPerson>, Prisma__HitPersonClient<HitPersonGetPayload<T>>>

    /**
     * Count the number of HitPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonCountArgs} args - Arguments to filter HitPeople to count.
     * @example
     * // Count the number of HitPeople
     * const count = await prisma.hitPerson.count({
     *   where: {
     *     // ... the filter for the HitPeople we want to count
     *   }
     * })
    **/
    count<T extends HitPersonCountArgs>(
      args?: Subset<T, HitPersonCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HitPersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HitPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HitPersonAggregateArgs>(args: Subset<T, HitPersonAggregateArgs>): PrismaPromise<GetHitPersonAggregateType<T>>

    /**
     * Group by HitPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HitPersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HitPersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HitPersonGroupByArgs['orderBy'] }
        : { orderBy?: HitPersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HitPersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHitPersonGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for HitPerson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HitPersonClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accident<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    accident_pictures<T extends ImageFindManyArgs = {}>(args?: Subset<T, ImageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * HitPerson findUnique
   */
  export type HitPersonFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * Throw an Error if a HitPerson can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which HitPerson to fetch.
     * 
    **/
    where: HitPersonWhereUniqueInput
  }


  /**
   * HitPerson findFirst
   */
  export type HitPersonFindFirstArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * Throw an Error if a HitPerson can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which HitPerson to fetch.
     * 
    **/
    where?: HitPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HitPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<HitPersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HitPeople.
     * 
    **/
    cursor?: HitPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HitPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HitPeople.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HitPeople.
     * 
    **/
    distinct?: Enumerable<HitPersonScalarFieldEnum>
  }


  /**
   * HitPerson findMany
   */
  export type HitPersonFindManyArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * Filter, which HitPeople to fetch.
     * 
    **/
    where?: HitPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HitPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<HitPersonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HitPeople.
     * 
    **/
    cursor?: HitPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HitPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HitPeople.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HitPersonScalarFieldEnum>
  }


  /**
   * HitPerson create
   */
  export type HitPersonCreateArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * The data needed to create a HitPerson.
     * 
    **/
    data: XOR<HitPersonCreateInput, HitPersonUncheckedCreateInput>
  }


  /**
   * HitPerson createMany
   */
  export type HitPersonCreateManyArgs = {
    data: Enumerable<HitPersonCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HitPerson update
   */
  export type HitPersonUpdateArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * The data needed to update a HitPerson.
     * 
    **/
    data: XOR<HitPersonUpdateInput, HitPersonUncheckedUpdateInput>
    /**
     * Choose, which HitPerson to update.
     * 
    **/
    where: HitPersonWhereUniqueInput
  }


  /**
   * HitPerson updateMany
   */
  export type HitPersonUpdateManyArgs = {
    data: XOR<HitPersonUpdateManyMutationInput, HitPersonUncheckedUpdateManyInput>
    where?: HitPersonWhereInput
  }


  /**
   * HitPerson upsert
   */
  export type HitPersonUpsertArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * The filter to search for the HitPerson to update in case it exists.
     * 
    **/
    where: HitPersonWhereUniqueInput
    /**
     * In case the HitPerson found by the `where` argument doesn't exist, create a new HitPerson with this data.
     * 
    **/
    create: XOR<HitPersonCreateInput, HitPersonUncheckedCreateInput>
    /**
     * In case the HitPerson was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<HitPersonUpdateInput, HitPersonUncheckedUpdateInput>
  }


  /**
   * HitPerson delete
   */
  export type HitPersonDeleteArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
    /**
     * Filter which HitPerson to delete.
     * 
    **/
    where: HitPersonWhereUniqueInput
  }


  /**
   * HitPerson deleteMany
   */
  export type HitPersonDeleteManyArgs = {
    where?: HitPersonWhereInput
  }


  /**
   * HitPerson without action
   */
  export type HitPersonArgs = {
    /**
     * Select specific fields to fetch from the HitPerson
     * 
    **/
    select?: HitPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HitPersonInclude | null
  }



  /**
   * Model ThirdParty
   */


  export type AggregateThirdParty = {
    _count: ThirdPartyCountAggregateOutputType | null
    _avg: ThirdPartyAvgAggregateOutputType | null
    _sum: ThirdPartySumAggregateOutputType | null
    _min: ThirdPartyMinAggregateOutputType | null
    _max: ThirdPartyMaxAggregateOutputType | null
  }

  export type ThirdPartyAvgAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type ThirdPartySumAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type ThirdPartyMinAggregateOutputType = {
    id: number | null
    accidentId: number | null
    location: string | null
  }

  export type ThirdPartyMaxAggregateOutputType = {
    id: number | null
    accidentId: number | null
    location: string | null
  }

  export type ThirdPartyCountAggregateOutputType = {
    id: number
    accidentId: number
    location: number
    _all: number
  }


  export type ThirdPartyAvgAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type ThirdPartySumAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type ThirdPartyMinAggregateInputType = {
    id?: true
    accidentId?: true
    location?: true
  }

  export type ThirdPartyMaxAggregateInputType = {
    id?: true
    accidentId?: true
    location?: true
  }

  export type ThirdPartyCountAggregateInputType = {
    id?: true
    accidentId?: true
    location?: true
    _all?: true
  }

  export type ThirdPartyAggregateArgs = {
    /**
     * Filter which ThirdParty to aggregate.
     * 
    **/
    where?: ThirdPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThirdParties to fetch.
     * 
    **/
    orderBy?: Enumerable<ThirdPartyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ThirdPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThirdParties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThirdParties.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThirdParties
    **/
    _count?: true | ThirdPartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThirdPartyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThirdPartySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThirdPartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThirdPartyMaxAggregateInputType
  }

  export type GetThirdPartyAggregateType<T extends ThirdPartyAggregateArgs> = {
        [P in keyof T & keyof AggregateThirdParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThirdParty[P]>
      : GetScalarType<T[P], AggregateThirdParty[P]>
  }




  export type ThirdPartyGroupByArgs = {
    where?: ThirdPartyWhereInput
    orderBy?: Enumerable<ThirdPartyOrderByWithAggregationInput>
    by: Array<ThirdPartyScalarFieldEnum>
    having?: ThirdPartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThirdPartyCountAggregateInputType | true
    _avg?: ThirdPartyAvgAggregateInputType
    _sum?: ThirdPartySumAggregateInputType
    _min?: ThirdPartyMinAggregateInputType
    _max?: ThirdPartyMaxAggregateInputType
  }


  export type ThirdPartyGroupByOutputType = {
    id: number
    accidentId: number
    location: string
    _count: ThirdPartyCountAggregateOutputType | null
    _avg: ThirdPartyAvgAggregateOutputType | null
    _sum: ThirdPartySumAggregateOutputType | null
    _min: ThirdPartyMinAggregateOutputType | null
    _max: ThirdPartyMaxAggregateOutputType | null
  }

  type GetThirdPartyGroupByPayload<T extends ThirdPartyGroupByArgs> = Promise<
    Array<
      PickArray<ThirdPartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThirdPartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThirdPartyGroupByOutputType[P]>
            : GetScalarType<T[P], ThirdPartyGroupByOutputType[P]>
        }
      >
    >


  export type ThirdPartySelect = {
    id?: boolean
    accidentId?: boolean
    accident?: boolean | AccidentFindManyArgs
    location?: boolean
    _count?: boolean | ThirdPartyCountOutputTypeArgs
  }

  export type ThirdPartyInclude = {
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | ThirdPartyCountOutputTypeArgs
  }

  export type ThirdPartyGetPayload<
    S extends boolean | null | undefined | ThirdPartyArgs,
    U = keyof S
      > = S extends true
        ? ThirdParty
    : S extends undefined
    ? never
    : S extends ThirdPartyArgs | ThirdPartyFindManyArgs
    ?'include' extends U
    ? ThirdParty  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ThirdPartyCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ThirdParty ?ThirdParty [P]
  : 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ThirdPartyCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : ThirdParty
  : ThirdParty


  type ThirdPartyCountArgs = Merge<
    Omit<ThirdPartyFindManyArgs, 'select' | 'include'> & {
      select?: ThirdPartyCountAggregateInputType | true
    }
  >

  export interface ThirdPartyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ThirdParty that matches the filter.
     * @param {ThirdPartyFindUniqueArgs} args - Arguments to find a ThirdParty
     * @example
     * // Get one ThirdParty
     * const thirdParty = await prisma.thirdParty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThirdPartyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThirdPartyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ThirdParty'> extends True ? CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>> : CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty | null >, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T> | null >>

    /**
     * Find the first ThirdParty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyFindFirstArgs} args - Arguments to find a ThirdParty
     * @example
     * // Get one ThirdParty
     * const thirdParty = await prisma.thirdParty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThirdPartyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThirdPartyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ThirdParty'> extends True ? CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>> : CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty | null >, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T> | null >>

    /**
     * Find zero or more ThirdParties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThirdParties
     * const thirdParties = await prisma.thirdParty.findMany()
     * 
     * // Get first 10 ThirdParties
     * const thirdParties = await prisma.thirdParty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thirdPartyWithIdOnly = await prisma.thirdParty.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThirdPartyFindManyArgs>(
      args?: SelectSubset<T, ThirdPartyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ThirdParty>>, PrismaPromise<Array<ThirdPartyGetPayload<T>>>>

    /**
     * Create a ThirdParty.
     * @param {ThirdPartyCreateArgs} args - Arguments to create a ThirdParty.
     * @example
     * // Create one ThirdParty
     * const ThirdParty = await prisma.thirdParty.create({
     *   data: {
     *     // ... data to create a ThirdParty
     *   }
     * })
     * 
    **/
    create<T extends ThirdPartyCreateArgs>(
      args: SelectSubset<T, ThirdPartyCreateArgs>
    ): CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>>

    /**
     * Create many ThirdParties.
     *     @param {ThirdPartyCreateManyArgs} args - Arguments to create many ThirdParties.
     *     @example
     *     // Create many ThirdParties
     *     const thirdParty = await prisma.thirdParty.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThirdPartyCreateManyArgs>(
      args?: SelectSubset<T, ThirdPartyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ThirdParty.
     * @param {ThirdPartyDeleteArgs} args - Arguments to delete one ThirdParty.
     * @example
     * // Delete one ThirdParty
     * const ThirdParty = await prisma.thirdParty.delete({
     *   where: {
     *     // ... filter to delete one ThirdParty
     *   }
     * })
     * 
    **/
    delete<T extends ThirdPartyDeleteArgs>(
      args: SelectSubset<T, ThirdPartyDeleteArgs>
    ): CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>>

    /**
     * Update one ThirdParty.
     * @param {ThirdPartyUpdateArgs} args - Arguments to update one ThirdParty.
     * @example
     * // Update one ThirdParty
     * const thirdParty = await prisma.thirdParty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThirdPartyUpdateArgs>(
      args: SelectSubset<T, ThirdPartyUpdateArgs>
    ): CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>>

    /**
     * Delete zero or more ThirdParties.
     * @param {ThirdPartyDeleteManyArgs} args - Arguments to filter ThirdParties to delete.
     * @example
     * // Delete a few ThirdParties
     * const { count } = await prisma.thirdParty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThirdPartyDeleteManyArgs>(
      args?: SelectSubset<T, ThirdPartyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThirdParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThirdParties
     * const thirdParty = await prisma.thirdParty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThirdPartyUpdateManyArgs>(
      args: SelectSubset<T, ThirdPartyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ThirdParty.
     * @param {ThirdPartyUpsertArgs} args - Arguments to update or create a ThirdParty.
     * @example
     * // Update or create a ThirdParty
     * const thirdParty = await prisma.thirdParty.upsert({
     *   create: {
     *     // ... data to create a ThirdParty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThirdParty we want to update
     *   }
     * })
    **/
    upsert<T extends ThirdPartyUpsertArgs>(
      args: SelectSubset<T, ThirdPartyUpsertArgs>
    ): CheckSelect<T, Prisma__ThirdPartyClient<ThirdParty>, Prisma__ThirdPartyClient<ThirdPartyGetPayload<T>>>

    /**
     * Count the number of ThirdParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyCountArgs} args - Arguments to filter ThirdParties to count.
     * @example
     * // Count the number of ThirdParties
     * const count = await prisma.thirdParty.count({
     *   where: {
     *     // ... the filter for the ThirdParties we want to count
     *   }
     * })
    **/
    count<T extends ThirdPartyCountArgs>(
      args?: Subset<T, ThirdPartyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThirdPartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThirdParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThirdPartyAggregateArgs>(args: Subset<T, ThirdPartyAggregateArgs>): PrismaPromise<GetThirdPartyAggregateType<T>>

    /**
     * Group by ThirdParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThirdPartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThirdPartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThirdPartyGroupByArgs['orderBy'] }
        : { orderBy?: ThirdPartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThirdPartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThirdPartyGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThirdParty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThirdPartyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accident<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ThirdParty findUnique
   */
  export type ThirdPartyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * Throw an Error if a ThirdParty can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ThirdParty to fetch.
     * 
    **/
    where: ThirdPartyWhereUniqueInput
  }


  /**
   * ThirdParty findFirst
   */
  export type ThirdPartyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * Throw an Error if a ThirdParty can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ThirdParty to fetch.
     * 
    **/
    where?: ThirdPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThirdParties to fetch.
     * 
    **/
    orderBy?: Enumerable<ThirdPartyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThirdParties.
     * 
    **/
    cursor?: ThirdPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThirdParties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThirdParties.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThirdParties.
     * 
    **/
    distinct?: Enumerable<ThirdPartyScalarFieldEnum>
  }


  /**
   * ThirdParty findMany
   */
  export type ThirdPartyFindManyArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * Filter, which ThirdParties to fetch.
     * 
    **/
    where?: ThirdPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThirdParties to fetch.
     * 
    **/
    orderBy?: Enumerable<ThirdPartyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThirdParties.
     * 
    **/
    cursor?: ThirdPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThirdParties from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThirdParties.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ThirdPartyScalarFieldEnum>
  }


  /**
   * ThirdParty create
   */
  export type ThirdPartyCreateArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * The data needed to create a ThirdParty.
     * 
    **/
    data: XOR<ThirdPartyCreateInput, ThirdPartyUncheckedCreateInput>
  }


  /**
   * ThirdParty createMany
   */
  export type ThirdPartyCreateManyArgs = {
    data: Enumerable<ThirdPartyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ThirdParty update
   */
  export type ThirdPartyUpdateArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * The data needed to update a ThirdParty.
     * 
    **/
    data: XOR<ThirdPartyUpdateInput, ThirdPartyUncheckedUpdateInput>
    /**
     * Choose, which ThirdParty to update.
     * 
    **/
    where: ThirdPartyWhereUniqueInput
  }


  /**
   * ThirdParty updateMany
   */
  export type ThirdPartyUpdateManyArgs = {
    data: XOR<ThirdPartyUpdateManyMutationInput, ThirdPartyUncheckedUpdateManyInput>
    where?: ThirdPartyWhereInput
  }


  /**
   * ThirdParty upsert
   */
  export type ThirdPartyUpsertArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * The filter to search for the ThirdParty to update in case it exists.
     * 
    **/
    where: ThirdPartyWhereUniqueInput
    /**
     * In case the ThirdParty found by the `where` argument doesn't exist, create a new ThirdParty with this data.
     * 
    **/
    create: XOR<ThirdPartyCreateInput, ThirdPartyUncheckedCreateInput>
    /**
     * In case the ThirdParty was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ThirdPartyUpdateInput, ThirdPartyUncheckedUpdateInput>
  }


  /**
   * ThirdParty delete
   */
  export type ThirdPartyDeleteArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
    /**
     * Filter which ThirdParty to delete.
     * 
    **/
    where: ThirdPartyWhereUniqueInput
  }


  /**
   * ThirdParty deleteMany
   */
  export type ThirdPartyDeleteManyArgs = {
    where?: ThirdPartyWhereInput
  }


  /**
   * ThirdParty without action
   */
  export type ThirdPartyArgs = {
    /**
     * Select specific fields to fetch from the ThirdParty
     * 
    **/
    select?: ThirdPartySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ThirdPartyInclude | null
  }



  /**
   * Model InjuryAccident
   */


  export type AggregateInjuryAccident = {
    _count: InjuryAccidentCountAggregateOutputType | null
    _avg: InjuryAccidentAvgAggregateOutputType | null
    _sum: InjuryAccidentSumAggregateOutputType | null
    _min: InjuryAccidentMinAggregateOutputType | null
    _max: InjuryAccidentMaxAggregateOutputType | null
  }

  export type InjuryAccidentAvgAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type InjuryAccidentSumAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type InjuryAccidentMinAggregateOutputType = {
    id: number | null
    self_injured: boolean | null
    vehicle_number: string | null
    amazon_logo: boolean | null
    exact_address: string | null
    weather: string | null
    wet_ground: boolean | null
    slippery_ground: boolean | null
    extra_info: string | null
    rushed_prior: boolean | null
    accidentId: number | null
  }

  export type InjuryAccidentMaxAggregateOutputType = {
    id: number | null
    self_injured: boolean | null
    vehicle_number: string | null
    amazon_logo: boolean | null
    exact_address: string | null
    weather: string | null
    wet_ground: boolean | null
    slippery_ground: boolean | null
    extra_info: string | null
    rushed_prior: boolean | null
    accidentId: number | null
  }

  export type InjuryAccidentCountAggregateOutputType = {
    id: number
    self_injured: number
    vehicle_number: number
    amazon_logo: number
    exact_address: number
    action_before_accident: number
    police_report: number
    weather: number
    wet_ground: number
    slippery_ground: number
    extra_info: number
    rushed_prior: number
    accidentId: number
    _all: number
  }


  export type InjuryAccidentAvgAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type InjuryAccidentSumAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type InjuryAccidentMinAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
  }

  export type InjuryAccidentMaxAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
  }

  export type InjuryAccidentCountAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    action_before_accident?: true
    police_report?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
    _all?: true
  }

  export type InjuryAccidentAggregateArgs = {
    /**
     * Filter which InjuryAccident to aggregate.
     * 
    **/
    where?: InjuryAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InjuryAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryAccidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InjuryAccidents
    **/
    _count?: true | InjuryAccidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InjuryAccidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InjuryAccidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InjuryAccidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InjuryAccidentMaxAggregateInputType
  }

  export type GetInjuryAccidentAggregateType<T extends InjuryAccidentAggregateArgs> = {
        [P in keyof T & keyof AggregateInjuryAccident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInjuryAccident[P]>
      : GetScalarType<T[P], AggregateInjuryAccident[P]>
  }




  export type InjuryAccidentGroupByArgs = {
    where?: InjuryAccidentWhereInput
    orderBy?: Enumerable<InjuryAccidentOrderByWithAggregationInput>
    by: Array<InjuryAccidentScalarFieldEnum>
    having?: InjuryAccidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InjuryAccidentCountAggregateInputType | true
    _avg?: InjuryAccidentAvgAggregateInputType
    _sum?: InjuryAccidentSumAggregateInputType
    _min?: InjuryAccidentMinAggregateInputType
    _max?: InjuryAccidentMaxAggregateInputType
  }


  export type InjuryAccidentGroupByOutputType = {
    id: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonValue
    police_report: JsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    _count: InjuryAccidentCountAggregateOutputType | null
    _avg: InjuryAccidentAvgAggregateOutputType | null
    _sum: InjuryAccidentSumAggregateOutputType | null
    _min: InjuryAccidentMinAggregateOutputType | null
    _max: InjuryAccidentMaxAggregateOutputType | null
  }

  type GetInjuryAccidentGroupByPayload<T extends InjuryAccidentGroupByArgs> = Promise<
    Array<
      PickArray<InjuryAccidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InjuryAccidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InjuryAccidentGroupByOutputType[P]>
            : GetScalarType<T[P], InjuryAccidentGroupByOutputType[P]>
        }
      >
    >


  export type InjuryAccidentSelect = {
    id?: boolean
    self_injured?: boolean
    vehicle_number?: boolean
    amazon_logo?: boolean
    exact_address?: boolean
    action_before_accident?: boolean
    police_report?: boolean
    weather?: boolean
    wet_ground?: boolean
    slippery_ground?: boolean
    extra_info?: boolean
    rushed_prior?: boolean
    accident_pictures?: boolean | ImageFindManyArgs
    accidentId?: boolean
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | InjuryAccidentCountOutputTypeArgs
  }

  export type InjuryAccidentInclude = {
    accident_pictures?: boolean | ImageFindManyArgs
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | InjuryAccidentCountOutputTypeArgs
  }

  export type InjuryAccidentGetPayload<
    S extends boolean | null | undefined | InjuryAccidentArgs,
    U = keyof S
      > = S extends true
        ? InjuryAccident
    : S extends undefined
    ? never
    : S extends InjuryAccidentArgs | InjuryAccidentFindManyArgs
    ?'include' extends U
    ? InjuryAccident  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['include'][P]>>  :
        P extends 'accident'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? InjuryAccidentCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InjuryAccident ?InjuryAccident [P]
  : 
          P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['select'][P]>>  :
        P extends 'accident'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? InjuryAccidentCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : InjuryAccident
  : InjuryAccident


  type InjuryAccidentCountArgs = Merge<
    Omit<InjuryAccidentFindManyArgs, 'select' | 'include'> & {
      select?: InjuryAccidentCountAggregateInputType | true
    }
  >

  export interface InjuryAccidentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InjuryAccident that matches the filter.
     * @param {InjuryAccidentFindUniqueArgs} args - Arguments to find a InjuryAccident
     * @example
     * // Get one InjuryAccident
     * const injuryAccident = await prisma.injuryAccident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InjuryAccidentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InjuryAccidentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InjuryAccident'> extends True ? CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>> : CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident | null >, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T> | null >>

    /**
     * Find the first InjuryAccident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentFindFirstArgs} args - Arguments to find a InjuryAccident
     * @example
     * // Get one InjuryAccident
     * const injuryAccident = await prisma.injuryAccident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InjuryAccidentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InjuryAccidentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InjuryAccident'> extends True ? CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>> : CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident | null >, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T> | null >>

    /**
     * Find zero or more InjuryAccidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InjuryAccidents
     * const injuryAccidents = await prisma.injuryAccident.findMany()
     * 
     * // Get first 10 InjuryAccidents
     * const injuryAccidents = await prisma.injuryAccident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const injuryAccidentWithIdOnly = await prisma.injuryAccident.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InjuryAccidentFindManyArgs>(
      args?: SelectSubset<T, InjuryAccidentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InjuryAccident>>, PrismaPromise<Array<InjuryAccidentGetPayload<T>>>>

    /**
     * Create a InjuryAccident.
     * @param {InjuryAccidentCreateArgs} args - Arguments to create a InjuryAccident.
     * @example
     * // Create one InjuryAccident
     * const InjuryAccident = await prisma.injuryAccident.create({
     *   data: {
     *     // ... data to create a InjuryAccident
     *   }
     * })
     * 
    **/
    create<T extends InjuryAccidentCreateArgs>(
      args: SelectSubset<T, InjuryAccidentCreateArgs>
    ): CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>>

    /**
     * Create many InjuryAccidents.
     *     @param {InjuryAccidentCreateManyArgs} args - Arguments to create many InjuryAccidents.
     *     @example
     *     // Create many InjuryAccidents
     *     const injuryAccident = await prisma.injuryAccident.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InjuryAccidentCreateManyArgs>(
      args?: SelectSubset<T, InjuryAccidentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InjuryAccident.
     * @param {InjuryAccidentDeleteArgs} args - Arguments to delete one InjuryAccident.
     * @example
     * // Delete one InjuryAccident
     * const InjuryAccident = await prisma.injuryAccident.delete({
     *   where: {
     *     // ... filter to delete one InjuryAccident
     *   }
     * })
     * 
    **/
    delete<T extends InjuryAccidentDeleteArgs>(
      args: SelectSubset<T, InjuryAccidentDeleteArgs>
    ): CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>>

    /**
     * Update one InjuryAccident.
     * @param {InjuryAccidentUpdateArgs} args - Arguments to update one InjuryAccident.
     * @example
     * // Update one InjuryAccident
     * const injuryAccident = await prisma.injuryAccident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InjuryAccidentUpdateArgs>(
      args: SelectSubset<T, InjuryAccidentUpdateArgs>
    ): CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>>

    /**
     * Delete zero or more InjuryAccidents.
     * @param {InjuryAccidentDeleteManyArgs} args - Arguments to filter InjuryAccidents to delete.
     * @example
     * // Delete a few InjuryAccidents
     * const { count } = await prisma.injuryAccident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InjuryAccidentDeleteManyArgs>(
      args?: SelectSubset<T, InjuryAccidentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InjuryAccidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InjuryAccidents
     * const injuryAccident = await prisma.injuryAccident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InjuryAccidentUpdateManyArgs>(
      args: SelectSubset<T, InjuryAccidentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InjuryAccident.
     * @param {InjuryAccidentUpsertArgs} args - Arguments to update or create a InjuryAccident.
     * @example
     * // Update or create a InjuryAccident
     * const injuryAccident = await prisma.injuryAccident.upsert({
     *   create: {
     *     // ... data to create a InjuryAccident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InjuryAccident we want to update
     *   }
     * })
    **/
    upsert<T extends InjuryAccidentUpsertArgs>(
      args: SelectSubset<T, InjuryAccidentUpsertArgs>
    ): CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident>, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T>>>

    /**
     * Count the number of InjuryAccidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentCountArgs} args - Arguments to filter InjuryAccidents to count.
     * @example
     * // Count the number of InjuryAccidents
     * const count = await prisma.injuryAccident.count({
     *   where: {
     *     // ... the filter for the InjuryAccidents we want to count
     *   }
     * })
    **/
    count<T extends InjuryAccidentCountArgs>(
      args?: Subset<T, InjuryAccidentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InjuryAccidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InjuryAccident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InjuryAccidentAggregateArgs>(args: Subset<T, InjuryAccidentAggregateArgs>): PrismaPromise<GetInjuryAccidentAggregateType<T>>

    /**
     * Group by InjuryAccident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryAccidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InjuryAccidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InjuryAccidentGroupByArgs['orderBy'] }
        : { orderBy?: InjuryAccidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InjuryAccidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInjuryAccidentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InjuryAccident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InjuryAccidentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accident_pictures<T extends ImageFindManyArgs = {}>(args?: Subset<T, ImageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>;

    accident<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InjuryAccident findUnique
   */
  export type InjuryAccidentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * Throw an Error if a InjuryAccident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InjuryAccident to fetch.
     * 
    **/
    where: InjuryAccidentWhereUniqueInput
  }


  /**
   * InjuryAccident findFirst
   */
  export type InjuryAccidentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * Throw an Error if a InjuryAccident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InjuryAccident to fetch.
     * 
    **/
    where?: InjuryAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InjuryAccidents.
     * 
    **/
    cursor?: InjuryAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryAccidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InjuryAccidents.
     * 
    **/
    distinct?: Enumerable<InjuryAccidentScalarFieldEnum>
  }


  /**
   * InjuryAccident findMany
   */
  export type InjuryAccidentFindManyArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * Filter, which InjuryAccidents to fetch.
     * 
    **/
    where?: InjuryAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InjuryAccidents.
     * 
    **/
    cursor?: InjuryAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryAccidents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InjuryAccidentScalarFieldEnum>
  }


  /**
   * InjuryAccident create
   */
  export type InjuryAccidentCreateArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * The data needed to create a InjuryAccident.
     * 
    **/
    data: XOR<InjuryAccidentCreateInput, InjuryAccidentUncheckedCreateInput>
  }


  /**
   * InjuryAccident createMany
   */
  export type InjuryAccidentCreateManyArgs = {
    data: Enumerable<InjuryAccidentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InjuryAccident update
   */
  export type InjuryAccidentUpdateArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * The data needed to update a InjuryAccident.
     * 
    **/
    data: XOR<InjuryAccidentUpdateInput, InjuryAccidentUncheckedUpdateInput>
    /**
     * Choose, which InjuryAccident to update.
     * 
    **/
    where: InjuryAccidentWhereUniqueInput
  }


  /**
   * InjuryAccident updateMany
   */
  export type InjuryAccidentUpdateManyArgs = {
    data: XOR<InjuryAccidentUpdateManyMutationInput, InjuryAccidentUncheckedUpdateManyInput>
    where?: InjuryAccidentWhereInput
  }


  /**
   * InjuryAccident upsert
   */
  export type InjuryAccidentUpsertArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * The filter to search for the InjuryAccident to update in case it exists.
     * 
    **/
    where: InjuryAccidentWhereUniqueInput
    /**
     * In case the InjuryAccident found by the `where` argument doesn't exist, create a new InjuryAccident with this data.
     * 
    **/
    create: XOR<InjuryAccidentCreateInput, InjuryAccidentUncheckedCreateInput>
    /**
     * In case the InjuryAccident was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InjuryAccidentUpdateInput, InjuryAccidentUncheckedUpdateInput>
  }


  /**
   * InjuryAccident delete
   */
  export type InjuryAccidentDeleteArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
    /**
     * Filter which InjuryAccident to delete.
     * 
    **/
    where: InjuryAccidentWhereUniqueInput
  }


  /**
   * InjuryAccident deleteMany
   */
  export type InjuryAccidentDeleteManyArgs = {
    where?: InjuryAccidentWhereInput
  }


  /**
   * InjuryAccident without action
   */
  export type InjuryAccidentArgs = {
    /**
     * Select specific fields to fetch from the InjuryAccident
     * 
    **/
    select?: InjuryAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryAccidentInclude | null
  }



  /**
   * Model PropertyAccident
   */


  export type AggregatePropertyAccident = {
    _count: PropertyAccidentCountAggregateOutputType | null
    _avg: PropertyAccidentAvgAggregateOutputType | null
    _sum: PropertyAccidentSumAggregateOutputType | null
    _min: PropertyAccidentMinAggregateOutputType | null
    _max: PropertyAccidentMaxAggregateOutputType | null
  }

  export type PropertyAccidentAvgAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type PropertyAccidentSumAggregateOutputType = {
    id: number | null
    accidentId: number | null
  }

  export type PropertyAccidentMinAggregateOutputType = {
    id: number | null
    self_injured: boolean | null
    vehicle_number: string | null
    amazon_logo: boolean | null
    exact_address: string | null
    weather: string | null
    wet_ground: boolean | null
    slippery_ground: boolean | null
    extra_info: string | null
    rushed_prior: boolean | null
    accidentId: number | null
  }

  export type PropertyAccidentMaxAggregateOutputType = {
    id: number | null
    self_injured: boolean | null
    vehicle_number: string | null
    amazon_logo: boolean | null
    exact_address: string | null
    weather: string | null
    wet_ground: boolean | null
    slippery_ground: boolean | null
    extra_info: string | null
    rushed_prior: boolean | null
    accidentId: number | null
  }

  export type PropertyAccidentCountAggregateOutputType = {
    id: number
    self_injured: number
    vehicle_number: number
    amazon_logo: number
    exact_address: number
    action_before_accident: number
    police_report: number
    weather: number
    wet_ground: number
    slippery_ground: number
    extra_info: number
    rushed_prior: number
    accidentId: number
    _all: number
  }


  export type PropertyAccidentAvgAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type PropertyAccidentSumAggregateInputType = {
    id?: true
    accidentId?: true
  }

  export type PropertyAccidentMinAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
  }

  export type PropertyAccidentMaxAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
  }

  export type PropertyAccidentCountAggregateInputType = {
    id?: true
    self_injured?: true
    vehicle_number?: true
    amazon_logo?: true
    exact_address?: true
    action_before_accident?: true
    police_report?: true
    weather?: true
    wet_ground?: true
    slippery_ground?: true
    extra_info?: true
    rushed_prior?: true
    accidentId?: true
    _all?: true
  }

  export type PropertyAccidentAggregateArgs = {
    /**
     * Filter which PropertyAccident to aggregate.
     * 
    **/
    where?: PropertyAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PropertyAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyAccidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PropertyAccidents
    **/
    _count?: true | PropertyAccidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAccidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertyAccidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyAccidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyAccidentMaxAggregateInputType
  }

  export type GetPropertyAccidentAggregateType<T extends PropertyAccidentAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyAccident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyAccident[P]>
      : GetScalarType<T[P], AggregatePropertyAccident[P]>
  }




  export type PropertyAccidentGroupByArgs = {
    where?: PropertyAccidentWhereInput
    orderBy?: Enumerable<PropertyAccidentOrderByWithAggregationInput>
    by: Array<PropertyAccidentScalarFieldEnum>
    having?: PropertyAccidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyAccidentCountAggregateInputType | true
    _avg?: PropertyAccidentAvgAggregateInputType
    _sum?: PropertyAccidentSumAggregateInputType
    _min?: PropertyAccidentMinAggregateInputType
    _max?: PropertyAccidentMaxAggregateInputType
  }


  export type PropertyAccidentGroupByOutputType = {
    id: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonValue
    police_report: JsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    _count: PropertyAccidentCountAggregateOutputType | null
    _avg: PropertyAccidentAvgAggregateOutputType | null
    _sum: PropertyAccidentSumAggregateOutputType | null
    _min: PropertyAccidentMinAggregateOutputType | null
    _max: PropertyAccidentMaxAggregateOutputType | null
  }

  type GetPropertyAccidentGroupByPayload<T extends PropertyAccidentGroupByArgs> = Promise<
    Array<
      PickArray<PropertyAccidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyAccidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyAccidentGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyAccidentGroupByOutputType[P]>
        }
      >
    >


  export type PropertyAccidentSelect = {
    id?: boolean
    self_injured?: boolean
    vehicle_number?: boolean
    amazon_logo?: boolean
    exact_address?: boolean
    action_before_accident?: boolean
    police_report?: boolean
    weather?: boolean
    wet_ground?: boolean
    slippery_ground?: boolean
    extra_info?: boolean
    rushed_prior?: boolean
    accident_pictures?: boolean | ImageFindManyArgs
    accidentId?: boolean
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | PropertyAccidentCountOutputTypeArgs
  }

  export type PropertyAccidentInclude = {
    accident_pictures?: boolean | ImageFindManyArgs
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | PropertyAccidentCountOutputTypeArgs
  }

  export type PropertyAccidentGetPayload<
    S extends boolean | null | undefined | PropertyAccidentArgs,
    U = keyof S
      > = S extends true
        ? PropertyAccident
    : S extends undefined
    ? never
    : S extends PropertyAccidentArgs | PropertyAccidentFindManyArgs
    ?'include' extends U
    ? PropertyAccident  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['include'][P]>>  :
        P extends 'accident'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? PropertyAccidentCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PropertyAccident ?PropertyAccident [P]
  : 
          P extends 'accident_pictures'
        ? Array < ImageGetPayload<S['select'][P]>>  :
        P extends 'accident'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? PropertyAccidentCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : PropertyAccident
  : PropertyAccident


  type PropertyAccidentCountArgs = Merge<
    Omit<PropertyAccidentFindManyArgs, 'select' | 'include'> & {
      select?: PropertyAccidentCountAggregateInputType | true
    }
  >

  export interface PropertyAccidentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PropertyAccident that matches the filter.
     * @param {PropertyAccidentFindUniqueArgs} args - Arguments to find a PropertyAccident
     * @example
     * // Get one PropertyAccident
     * const propertyAccident = await prisma.propertyAccident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyAccidentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PropertyAccidentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PropertyAccident'> extends True ? CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>> : CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident | null >, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T> | null >>

    /**
     * Find the first PropertyAccident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentFindFirstArgs} args - Arguments to find a PropertyAccident
     * @example
     * // Get one PropertyAccident
     * const propertyAccident = await prisma.propertyAccident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyAccidentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PropertyAccidentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PropertyAccident'> extends True ? CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>> : CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident | null >, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T> | null >>

    /**
     * Find zero or more PropertyAccidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropertyAccidents
     * const propertyAccidents = await prisma.propertyAccident.findMany()
     * 
     * // Get first 10 PropertyAccidents
     * const propertyAccidents = await prisma.propertyAccident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyAccidentWithIdOnly = await prisma.propertyAccident.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyAccidentFindManyArgs>(
      args?: SelectSubset<T, PropertyAccidentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PropertyAccident>>, PrismaPromise<Array<PropertyAccidentGetPayload<T>>>>

    /**
     * Create a PropertyAccident.
     * @param {PropertyAccidentCreateArgs} args - Arguments to create a PropertyAccident.
     * @example
     * // Create one PropertyAccident
     * const PropertyAccident = await prisma.propertyAccident.create({
     *   data: {
     *     // ... data to create a PropertyAccident
     *   }
     * })
     * 
    **/
    create<T extends PropertyAccidentCreateArgs>(
      args: SelectSubset<T, PropertyAccidentCreateArgs>
    ): CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>>

    /**
     * Create many PropertyAccidents.
     *     @param {PropertyAccidentCreateManyArgs} args - Arguments to create many PropertyAccidents.
     *     @example
     *     // Create many PropertyAccidents
     *     const propertyAccident = await prisma.propertyAccident.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PropertyAccidentCreateManyArgs>(
      args?: SelectSubset<T, PropertyAccidentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PropertyAccident.
     * @param {PropertyAccidentDeleteArgs} args - Arguments to delete one PropertyAccident.
     * @example
     * // Delete one PropertyAccident
     * const PropertyAccident = await prisma.propertyAccident.delete({
     *   where: {
     *     // ... filter to delete one PropertyAccident
     *   }
     * })
     * 
    **/
    delete<T extends PropertyAccidentDeleteArgs>(
      args: SelectSubset<T, PropertyAccidentDeleteArgs>
    ): CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>>

    /**
     * Update one PropertyAccident.
     * @param {PropertyAccidentUpdateArgs} args - Arguments to update one PropertyAccident.
     * @example
     * // Update one PropertyAccident
     * const propertyAccident = await prisma.propertyAccident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyAccidentUpdateArgs>(
      args: SelectSubset<T, PropertyAccidentUpdateArgs>
    ): CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>>

    /**
     * Delete zero or more PropertyAccidents.
     * @param {PropertyAccidentDeleteManyArgs} args - Arguments to filter PropertyAccidents to delete.
     * @example
     * // Delete a few PropertyAccidents
     * const { count } = await prisma.propertyAccident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyAccidentDeleteManyArgs>(
      args?: SelectSubset<T, PropertyAccidentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropertyAccidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropertyAccidents
     * const propertyAccident = await prisma.propertyAccident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyAccidentUpdateManyArgs>(
      args: SelectSubset<T, PropertyAccidentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PropertyAccident.
     * @param {PropertyAccidentUpsertArgs} args - Arguments to update or create a PropertyAccident.
     * @example
     * // Update or create a PropertyAccident
     * const propertyAccident = await prisma.propertyAccident.upsert({
     *   create: {
     *     // ... data to create a PropertyAccident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropertyAccident we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyAccidentUpsertArgs>(
      args: SelectSubset<T, PropertyAccidentUpsertArgs>
    ): CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident>, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T>>>

    /**
     * Count the number of PropertyAccidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentCountArgs} args - Arguments to filter PropertyAccidents to count.
     * @example
     * // Count the number of PropertyAccidents
     * const count = await prisma.propertyAccident.count({
     *   where: {
     *     // ... the filter for the PropertyAccidents we want to count
     *   }
     * })
    **/
    count<T extends PropertyAccidentCountArgs>(
      args?: Subset<T, PropertyAccidentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyAccidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropertyAccident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAccidentAggregateArgs>(args: Subset<T, PropertyAccidentAggregateArgs>): PrismaPromise<GetPropertyAccidentAggregateType<T>>

    /**
     * Group by PropertyAccident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAccidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyAccidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyAccidentGroupByArgs['orderBy'] }
        : { orderBy?: PropertyAccidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyAccidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyAccidentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PropertyAccident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PropertyAccidentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accident_pictures<T extends ImageFindManyArgs = {}>(args?: Subset<T, ImageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>;

    accident<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PropertyAccident findUnique
   */
  export type PropertyAccidentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * Throw an Error if a PropertyAccident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PropertyAccident to fetch.
     * 
    **/
    where: PropertyAccidentWhereUniqueInput
  }


  /**
   * PropertyAccident findFirst
   */
  export type PropertyAccidentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * Throw an Error if a PropertyAccident can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PropertyAccident to fetch.
     * 
    **/
    where?: PropertyAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyAccidents.
     * 
    **/
    cursor?: PropertyAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyAccidents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyAccidents.
     * 
    **/
    distinct?: Enumerable<PropertyAccidentScalarFieldEnum>
  }


  /**
   * PropertyAccident findMany
   */
  export type PropertyAccidentFindManyArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * Filter, which PropertyAccidents to fetch.
     * 
    **/
    where?: PropertyAccidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyAccidents to fetch.
     * 
    **/
    orderBy?: Enumerable<PropertyAccidentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PropertyAccidents.
     * 
    **/
    cursor?: PropertyAccidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyAccidents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyAccidents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PropertyAccidentScalarFieldEnum>
  }


  /**
   * PropertyAccident create
   */
  export type PropertyAccidentCreateArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * The data needed to create a PropertyAccident.
     * 
    **/
    data: XOR<PropertyAccidentCreateInput, PropertyAccidentUncheckedCreateInput>
  }


  /**
   * PropertyAccident createMany
   */
  export type PropertyAccidentCreateManyArgs = {
    data: Enumerable<PropertyAccidentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PropertyAccident update
   */
  export type PropertyAccidentUpdateArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * The data needed to update a PropertyAccident.
     * 
    **/
    data: XOR<PropertyAccidentUpdateInput, PropertyAccidentUncheckedUpdateInput>
    /**
     * Choose, which PropertyAccident to update.
     * 
    **/
    where: PropertyAccidentWhereUniqueInput
  }


  /**
   * PropertyAccident updateMany
   */
  export type PropertyAccidentUpdateManyArgs = {
    data: XOR<PropertyAccidentUpdateManyMutationInput, PropertyAccidentUncheckedUpdateManyInput>
    where?: PropertyAccidentWhereInput
  }


  /**
   * PropertyAccident upsert
   */
  export type PropertyAccidentUpsertArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * The filter to search for the PropertyAccident to update in case it exists.
     * 
    **/
    where: PropertyAccidentWhereUniqueInput
    /**
     * In case the PropertyAccident found by the `where` argument doesn't exist, create a new PropertyAccident with this data.
     * 
    **/
    create: XOR<PropertyAccidentCreateInput, PropertyAccidentUncheckedCreateInput>
    /**
     * In case the PropertyAccident was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PropertyAccidentUpdateInput, PropertyAccidentUncheckedUpdateInput>
  }


  /**
   * PropertyAccident delete
   */
  export type PropertyAccidentDeleteArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
    /**
     * Filter which PropertyAccident to delete.
     * 
    **/
    where: PropertyAccidentWhereUniqueInput
  }


  /**
   * PropertyAccident deleteMany
   */
  export type PropertyAccidentDeleteManyArgs = {
    where?: PropertyAccidentWhereInput
  }


  /**
   * PropertyAccident without action
   */
  export type PropertyAccidentArgs = {
    /**
     * Select specific fields to fetch from the PropertyAccident
     * 
    **/
    select?: PropertyAccidentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PropertyAccidentInclude | null
  }



  /**
   * Model InjuryReport
   */


  export type AggregateInjuryReport = {
    _count: InjuryReportCountAggregateOutputType | null
    _avg: InjuryReportAvgAggregateOutputType | null
    _sum: InjuryReportSumAggregateOutputType | null
    _min: InjuryReportMinAggregateOutputType | null
    _max: InjuryReportMaxAggregateOutputType | null
  }

  export type InjuryReportAvgAggregateOutputType = {
    id: number | null
    pain_level: number | null
    accidentId: number | null
  }

  export type InjuryReportSumAggregateOutputType = {
    id: number | null
    pain_level: number | null
    accidentId: number | null
  }

  export type InjuryReportMinAggregateOutputType = {
    id: number | null
    immediate_attention: boolean | null
    self_injured: boolean | null
    other_injured: boolean | null
    before_injury: string | null
    pain_level: number | null
    addtional_information: string | null
    accidentId: number | null
  }

  export type InjuryReportMaxAggregateOutputType = {
    id: number | null
    immediate_attention: boolean | null
    self_injured: boolean | null
    other_injured: boolean | null
    before_injury: string | null
    pain_level: number | null
    addtional_information: string | null
    accidentId: number | null
  }

  export type InjuryReportCountAggregateOutputType = {
    id: number
    immediate_attention: number
    late: number
    self_injured: number
    injury_type: number
    other_injured: number
    before_injury: number
    packages: number
    safety_equipment: number
    unsafe_conditions: number
    pain_level: number
    addtional_information: number
    accidentId: number
    _all: number
  }


  export type InjuryReportAvgAggregateInputType = {
    id?: true
    pain_level?: true
    accidentId?: true
  }

  export type InjuryReportSumAggregateInputType = {
    id?: true
    pain_level?: true
    accidentId?: true
  }

  export type InjuryReportMinAggregateInputType = {
    id?: true
    immediate_attention?: true
    self_injured?: true
    other_injured?: true
    before_injury?: true
    pain_level?: true
    addtional_information?: true
    accidentId?: true
  }

  export type InjuryReportMaxAggregateInputType = {
    id?: true
    immediate_attention?: true
    self_injured?: true
    other_injured?: true
    before_injury?: true
    pain_level?: true
    addtional_information?: true
    accidentId?: true
  }

  export type InjuryReportCountAggregateInputType = {
    id?: true
    immediate_attention?: true
    late?: true
    self_injured?: true
    injury_type?: true
    other_injured?: true
    before_injury?: true
    packages?: true
    safety_equipment?: true
    unsafe_conditions?: true
    pain_level?: true
    addtional_information?: true
    accidentId?: true
    _all?: true
  }

  export type InjuryReportAggregateArgs = {
    /**
     * Filter which InjuryReport to aggregate.
     * 
    **/
    where?: InjuryReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryReports to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InjuryReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryReports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryReports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InjuryReports
    **/
    _count?: true | InjuryReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InjuryReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InjuryReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InjuryReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InjuryReportMaxAggregateInputType
  }

  export type GetInjuryReportAggregateType<T extends InjuryReportAggregateArgs> = {
        [P in keyof T & keyof AggregateInjuryReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInjuryReport[P]>
      : GetScalarType<T[P], AggregateInjuryReport[P]>
  }




  export type InjuryReportGroupByArgs = {
    where?: InjuryReportWhereInput
    orderBy?: Enumerable<InjuryReportOrderByWithAggregationInput>
    by: Array<InjuryReportScalarFieldEnum>
    having?: InjuryReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InjuryReportCountAggregateInputType | true
    _avg?: InjuryReportAvgAggregateInputType
    _sum?: InjuryReportSumAggregateInputType
    _min?: InjuryReportMinAggregateInputType
    _max?: InjuryReportMaxAggregateInputType
  }


  export type InjuryReportGroupByOutputType = {
    id: number
    immediate_attention: boolean
    late: JsonValue
    self_injured: boolean
    injury_type: JsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonValue
    safety_equipment: JsonValue
    unsafe_conditions: JsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
    _count: InjuryReportCountAggregateOutputType | null
    _avg: InjuryReportAvgAggregateOutputType | null
    _sum: InjuryReportSumAggregateOutputType | null
    _min: InjuryReportMinAggregateOutputType | null
    _max: InjuryReportMaxAggregateOutputType | null
  }

  type GetInjuryReportGroupByPayload<T extends InjuryReportGroupByArgs> = Promise<
    Array<
      PickArray<InjuryReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InjuryReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InjuryReportGroupByOutputType[P]>
            : GetScalarType<T[P], InjuryReportGroupByOutputType[P]>
        }
      >
    >


  export type InjuryReportSelect = {
    id?: boolean
    immediate_attention?: boolean
    late?: boolean
    self_injured?: boolean
    injury_type?: boolean
    other_injured?: boolean
    before_injury?: boolean
    packages?: boolean
    safety_equipment?: boolean
    unsafe_conditions?: boolean
    pain_level?: boolean
    addtional_information?: boolean
    accidentId?: boolean
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | InjuryReportCountOutputTypeArgs
  }

  export type InjuryReportInclude = {
    accident?: boolean | AccidentFindManyArgs
    _count?: boolean | InjuryReportCountOutputTypeArgs
  }

  export type InjuryReportGetPayload<
    S extends boolean | null | undefined | InjuryReportArgs,
    U = keyof S
      > = S extends true
        ? InjuryReport
    : S extends undefined
    ? never
    : S extends InjuryReportArgs | InjuryReportFindManyArgs
    ?'include' extends U
    ? InjuryReport  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? InjuryReportCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof InjuryReport ?InjuryReport [P]
  : 
          P extends 'accident'
        ? Array < AccidentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? InjuryReportCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : InjuryReport
  : InjuryReport


  type InjuryReportCountArgs = Merge<
    Omit<InjuryReportFindManyArgs, 'select' | 'include'> & {
      select?: InjuryReportCountAggregateInputType | true
    }
  >

  export interface InjuryReportDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InjuryReport that matches the filter.
     * @param {InjuryReportFindUniqueArgs} args - Arguments to find a InjuryReport
     * @example
     * // Get one InjuryReport
     * const injuryReport = await prisma.injuryReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InjuryReportFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InjuryReportFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InjuryReport'> extends True ? CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>> : CheckSelect<T, Prisma__InjuryReportClient<InjuryReport | null >, Prisma__InjuryReportClient<InjuryReportGetPayload<T> | null >>

    /**
     * Find the first InjuryReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportFindFirstArgs} args - Arguments to find a InjuryReport
     * @example
     * // Get one InjuryReport
     * const injuryReport = await prisma.injuryReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InjuryReportFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InjuryReportFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InjuryReport'> extends True ? CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>> : CheckSelect<T, Prisma__InjuryReportClient<InjuryReport | null >, Prisma__InjuryReportClient<InjuryReportGetPayload<T> | null >>

    /**
     * Find zero or more InjuryReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InjuryReports
     * const injuryReports = await prisma.injuryReport.findMany()
     * 
     * // Get first 10 InjuryReports
     * const injuryReports = await prisma.injuryReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const injuryReportWithIdOnly = await prisma.injuryReport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InjuryReportFindManyArgs>(
      args?: SelectSubset<T, InjuryReportFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InjuryReport>>, PrismaPromise<Array<InjuryReportGetPayload<T>>>>

    /**
     * Create a InjuryReport.
     * @param {InjuryReportCreateArgs} args - Arguments to create a InjuryReport.
     * @example
     * // Create one InjuryReport
     * const InjuryReport = await prisma.injuryReport.create({
     *   data: {
     *     // ... data to create a InjuryReport
     *   }
     * })
     * 
    **/
    create<T extends InjuryReportCreateArgs>(
      args: SelectSubset<T, InjuryReportCreateArgs>
    ): CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>>

    /**
     * Create many InjuryReports.
     *     @param {InjuryReportCreateManyArgs} args - Arguments to create many InjuryReports.
     *     @example
     *     // Create many InjuryReports
     *     const injuryReport = await prisma.injuryReport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InjuryReportCreateManyArgs>(
      args?: SelectSubset<T, InjuryReportCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InjuryReport.
     * @param {InjuryReportDeleteArgs} args - Arguments to delete one InjuryReport.
     * @example
     * // Delete one InjuryReport
     * const InjuryReport = await prisma.injuryReport.delete({
     *   where: {
     *     // ... filter to delete one InjuryReport
     *   }
     * })
     * 
    **/
    delete<T extends InjuryReportDeleteArgs>(
      args: SelectSubset<T, InjuryReportDeleteArgs>
    ): CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>>

    /**
     * Update one InjuryReport.
     * @param {InjuryReportUpdateArgs} args - Arguments to update one InjuryReport.
     * @example
     * // Update one InjuryReport
     * const injuryReport = await prisma.injuryReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InjuryReportUpdateArgs>(
      args: SelectSubset<T, InjuryReportUpdateArgs>
    ): CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>>

    /**
     * Delete zero or more InjuryReports.
     * @param {InjuryReportDeleteManyArgs} args - Arguments to filter InjuryReports to delete.
     * @example
     * // Delete a few InjuryReports
     * const { count } = await prisma.injuryReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InjuryReportDeleteManyArgs>(
      args?: SelectSubset<T, InjuryReportDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InjuryReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InjuryReports
     * const injuryReport = await prisma.injuryReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InjuryReportUpdateManyArgs>(
      args: SelectSubset<T, InjuryReportUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InjuryReport.
     * @param {InjuryReportUpsertArgs} args - Arguments to update or create a InjuryReport.
     * @example
     * // Update or create a InjuryReport
     * const injuryReport = await prisma.injuryReport.upsert({
     *   create: {
     *     // ... data to create a InjuryReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InjuryReport we want to update
     *   }
     * })
    **/
    upsert<T extends InjuryReportUpsertArgs>(
      args: SelectSubset<T, InjuryReportUpsertArgs>
    ): CheckSelect<T, Prisma__InjuryReportClient<InjuryReport>, Prisma__InjuryReportClient<InjuryReportGetPayload<T>>>

    /**
     * Count the number of InjuryReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportCountArgs} args - Arguments to filter InjuryReports to count.
     * @example
     * // Count the number of InjuryReports
     * const count = await prisma.injuryReport.count({
     *   where: {
     *     // ... the filter for the InjuryReports we want to count
     *   }
     * })
    **/
    count<T extends InjuryReportCountArgs>(
      args?: Subset<T, InjuryReportCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InjuryReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InjuryReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InjuryReportAggregateArgs>(args: Subset<T, InjuryReportAggregateArgs>): PrismaPromise<GetInjuryReportAggregateType<T>>

    /**
     * Group by InjuryReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InjuryReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InjuryReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InjuryReportGroupByArgs['orderBy'] }
        : { orderBy?: InjuryReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InjuryReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInjuryReportGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InjuryReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InjuryReportClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accident<T extends AccidentFindManyArgs = {}>(args?: Subset<T, AccidentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accident>>, PrismaPromise<Array<AccidentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InjuryReport findUnique
   */
  export type InjuryReportFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * Throw an Error if a InjuryReport can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InjuryReport to fetch.
     * 
    **/
    where: InjuryReportWhereUniqueInput
  }


  /**
   * InjuryReport findFirst
   */
  export type InjuryReportFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * Throw an Error if a InjuryReport can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InjuryReport to fetch.
     * 
    **/
    where?: InjuryReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryReports to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InjuryReports.
     * 
    **/
    cursor?: InjuryReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryReports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryReports.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InjuryReports.
     * 
    **/
    distinct?: Enumerable<InjuryReportScalarFieldEnum>
  }


  /**
   * InjuryReport findMany
   */
  export type InjuryReportFindManyArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * Filter, which InjuryReports to fetch.
     * 
    **/
    where?: InjuryReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InjuryReports to fetch.
     * 
    **/
    orderBy?: Enumerable<InjuryReportOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InjuryReports.
     * 
    **/
    cursor?: InjuryReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InjuryReports from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InjuryReports.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InjuryReportScalarFieldEnum>
  }


  /**
   * InjuryReport create
   */
  export type InjuryReportCreateArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * The data needed to create a InjuryReport.
     * 
    **/
    data: XOR<InjuryReportCreateInput, InjuryReportUncheckedCreateInput>
  }


  /**
   * InjuryReport createMany
   */
  export type InjuryReportCreateManyArgs = {
    data: Enumerable<InjuryReportCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InjuryReport update
   */
  export type InjuryReportUpdateArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * The data needed to update a InjuryReport.
     * 
    **/
    data: XOR<InjuryReportUpdateInput, InjuryReportUncheckedUpdateInput>
    /**
     * Choose, which InjuryReport to update.
     * 
    **/
    where: InjuryReportWhereUniqueInput
  }


  /**
   * InjuryReport updateMany
   */
  export type InjuryReportUpdateManyArgs = {
    data: XOR<InjuryReportUpdateManyMutationInput, InjuryReportUncheckedUpdateManyInput>
    where?: InjuryReportWhereInput
  }


  /**
   * InjuryReport upsert
   */
  export type InjuryReportUpsertArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * The filter to search for the InjuryReport to update in case it exists.
     * 
    **/
    where: InjuryReportWhereUniqueInput
    /**
     * In case the InjuryReport found by the `where` argument doesn't exist, create a new InjuryReport with this data.
     * 
    **/
    create: XOR<InjuryReportCreateInput, InjuryReportUncheckedCreateInput>
    /**
     * In case the InjuryReport was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InjuryReportUpdateInput, InjuryReportUncheckedUpdateInput>
  }


  /**
   * InjuryReport delete
   */
  export type InjuryReportDeleteArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
    /**
     * Filter which InjuryReport to delete.
     * 
    **/
    where: InjuryReportWhereUniqueInput
  }


  /**
   * InjuryReport deleteMany
   */
  export type InjuryReportDeleteManyArgs = {
    where?: InjuryReportWhereInput
  }


  /**
   * InjuryReport without action
   */
  export type InjuryReportArgs = {
    /**
     * Select specific fields to fetch from the InjuryReport
     * 
    **/
    select?: InjuryReportSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InjuryReportInclude | null
  }



  /**
   * Model Image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    size: number | null
    injuryAccidentId: number | null
    hitPersonId: number | null
    propertyAccidentId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    size: number | null
    injuryAccidentId: number | null
    hitPersonId: number | null
    propertyAccidentId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    fieldname: string | null
    path: string | null
    mimetype: string | null
    size: number | null
    originalname: string | null
    encoding: string | null
    destination: string | null
    filename: string | null
    injuryAccidentId: number | null
    hitPersonId: number | null
    propertyAccidentId: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    fieldname: string | null
    path: string | null
    mimetype: string | null
    size: number | null
    originalname: string | null
    encoding: string | null
    destination: string | null
    filename: string | null
    injuryAccidentId: number | null
    hitPersonId: number | null
    propertyAccidentId: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    fieldname: number
    path: number
    mimetype: number
    size: number
    originalname: number
    encoding: number
    destination: number
    filename: number
    injuryAccidentId: number
    hitPersonId: number
    propertyAccidentId: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    size?: true
    injuryAccidentId?: true
    hitPersonId?: true
    propertyAccidentId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    size?: true
    injuryAccidentId?: true
    hitPersonId?: true
    propertyAccidentId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    fieldname?: true
    path?: true
    mimetype?: true
    size?: true
    originalname?: true
    encoding?: true
    destination?: true
    filename?: true
    injuryAccidentId?: true
    hitPersonId?: true
    propertyAccidentId?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    fieldname?: true
    path?: true
    mimetype?: true
    size?: true
    originalname?: true
    encoding?: true
    destination?: true
    filename?: true
    injuryAccidentId?: true
    hitPersonId?: true
    propertyAccidentId?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    fieldname?: true
    path?: true
    mimetype?: true
    size?: true
    originalname?: true
    encoding?: true
    destination?: true
    filename?: true
    injuryAccidentId?: true
    hitPersonId?: true
    propertyAccidentId?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: ImageWhereInput
    orderBy?: Enumerable<ImageOrderByWithAggregationInput>
    by: Array<ImageScalarFieldEnum>
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    id: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    hitPersonId: number
    propertyAccidentId: number
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Promise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect = {
    id?: boolean
    fieldname?: boolean
    path?: boolean
    mimetype?: boolean
    size?: boolean
    originalname?: boolean
    encoding?: boolean
    destination?: boolean
    filename?: boolean
    injuryAccidentId?: boolean
    injuryAccident?: boolean | InjuryAccidentArgs
    hitPersonId?: boolean
    hitPerson?: boolean | HitPersonArgs
    propertyAccidentId?: boolean
    propertyAccident?: boolean | PropertyAccidentArgs
  }

  export type ImageInclude = {
    injuryAccident?: boolean | InjuryAccidentArgs
    hitPerson?: boolean | HitPersonArgs
    propertyAccident?: boolean | PropertyAccidentArgs
  }

  export type ImageGetPayload<
    S extends boolean | null | undefined | ImageArgs,
    U = keyof S
      > = S extends true
        ? Image
    : S extends undefined
    ? never
    : S extends ImageArgs | ImageFindManyArgs
    ?'include' extends U
    ? Image  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'injuryAccident'
        ? InjuryAccidentGetPayload<S['include'][P]> :
        P extends 'hitPerson'
        ? HitPersonGetPayload<S['include'][P]> :
        P extends 'propertyAccident'
        ? PropertyAccidentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Image ?Image [P]
  : 
          P extends 'injuryAccident'
        ? InjuryAccidentGetPayload<S['select'][P]> :
        P extends 'hitPerson'
        ? HitPersonGetPayload<S['select'][P]> :
        P extends 'propertyAccident'
        ? PropertyAccidentGetPayload<S['select'][P]> : never
  } 
    : Image
  : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs>(
      args?: SelectSubset<T, ImageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    injuryAccident<T extends InjuryAccidentArgs = {}>(args?: Subset<T, InjuryAccidentArgs>): CheckSelect<T, Prisma__InjuryAccidentClient<InjuryAccident | null >, Prisma__InjuryAccidentClient<InjuryAccidentGetPayload<T> | null >>;

    hitPerson<T extends HitPersonArgs = {}>(args?: Subset<T, HitPersonArgs>): CheckSelect<T, Prisma__HitPersonClient<HitPerson | null >, Prisma__HitPersonClient<HitPersonGetPayload<T> | null >>;

    propertyAccident<T extends PropertyAccidentArgs = {}>(args?: Subset<T, PropertyAccidentArgs>): CheckSelect<T, Prisma__PropertyAccidentClient<PropertyAccident | null >, Prisma__PropertyAccidentClient<PropertyAccidentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
     * 
    **/
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image createMany
   */
  export type ImageCreateManyArgs = {
    data: Enumerable<ImageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
     * 
    **/
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
     * 
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     * 
    **/
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    firstname: 'firstname',
    lastname: 'lastname',
    username: 'username',
    email: 'email',
    password: 'password',
    fico: 'fico',
    netradyne: 'netradyne',
    da: 'da',
    seatbelt: 'seatbelt',
    speeding: 'speeding',
    defects: 'defects',
    cdf: 'cdf',
    dar: 'dar',
    dcr: 'dcr',
    pod: 'pod',
    cc: 'cc',
    sc: 'sc',
    has_many_accidents: 'has_many_accidents',
    belongs_to_team: 'belongs_to_team',
    attendance: 'attendance',
    productivity: 'productivity'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccidentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    using_safety: 'using_safety',
    safety_failed: 'safety_failed',
    number_package_carried: 'number_package_carried',
    safety_equipment_used: 'safety_equipment_used',
    failed_safety: 'failed_safety'
  };

  export type AccidentScalarFieldEnum = (typeof AccidentScalarFieldEnum)[keyof typeof AccidentScalarFieldEnum]


  export const HitPersonScalarFieldEnum: {
    id: 'id',
    accidentId: 'accidentId',
    medical_attention: 'medical_attention',
    vehicle_or_pedestrian: 'vehicle_or_pedestrian',
    previous_damage: 'previous_damage',
    contact_infomation: 'contact_infomation',
    injury: 'injury'
  };

  export type HitPersonScalarFieldEnum = (typeof HitPersonScalarFieldEnum)[keyof typeof HitPersonScalarFieldEnum]


  export const ThirdPartyScalarFieldEnum: {
    id: 'id',
    accidentId: 'accidentId',
    location: 'location'
  };

  export type ThirdPartyScalarFieldEnum = (typeof ThirdPartyScalarFieldEnum)[keyof typeof ThirdPartyScalarFieldEnum]


  export const InjuryAccidentScalarFieldEnum: {
    id: 'id',
    self_injured: 'self_injured',
    vehicle_number: 'vehicle_number',
    amazon_logo: 'amazon_logo',
    exact_address: 'exact_address',
    action_before_accident: 'action_before_accident',
    police_report: 'police_report',
    weather: 'weather',
    wet_ground: 'wet_ground',
    slippery_ground: 'slippery_ground',
    extra_info: 'extra_info',
    rushed_prior: 'rushed_prior',
    accidentId: 'accidentId'
  };

  export type InjuryAccidentScalarFieldEnum = (typeof InjuryAccidentScalarFieldEnum)[keyof typeof InjuryAccidentScalarFieldEnum]


  export const PropertyAccidentScalarFieldEnum: {
    id: 'id',
    self_injured: 'self_injured',
    vehicle_number: 'vehicle_number',
    amazon_logo: 'amazon_logo',
    exact_address: 'exact_address',
    action_before_accident: 'action_before_accident',
    police_report: 'police_report',
    weather: 'weather',
    wet_ground: 'wet_ground',
    slippery_ground: 'slippery_ground',
    extra_info: 'extra_info',
    rushed_prior: 'rushed_prior',
    accidentId: 'accidentId'
  };

  export type PropertyAccidentScalarFieldEnum = (typeof PropertyAccidentScalarFieldEnum)[keyof typeof PropertyAccidentScalarFieldEnum]


  export const InjuryReportScalarFieldEnum: {
    id: 'id',
    immediate_attention: 'immediate_attention',
    late: 'late',
    self_injured: 'self_injured',
    injury_type: 'injury_type',
    other_injured: 'other_injured',
    before_injury: 'before_injury',
    packages: 'packages',
    safety_equipment: 'safety_equipment',
    unsafe_conditions: 'unsafe_conditions',
    pain_level: 'pain_level',
    addtional_information: 'addtional_information',
    accidentId: 'accidentId'
  };

  export type InjuryReportScalarFieldEnum = (typeof InjuryReportScalarFieldEnum)[keyof typeof InjuryReportScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    fieldname: 'fieldname',
    path: 'path',
    mimetype: 'mimetype',
    size: 'size',
    originalname: 'originalname',
    encoding: 'encoding',
    destination: 'destination',
    filename: 'filename',
    injuryAccidentId: 'injuryAccidentId',
    hitPersonId: 'hitPersonId',
    propertyAccidentId: 'propertyAccidentId'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    role?: EnumRoleFilter | Role
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    fico?: IntNullableFilter | number | null
    netradyne?: IntNullableFilter | number | null
    da?: IntNullableFilter | number | null
    seatbelt?: BoolNullableFilter | boolean | null
    speeding?: BoolNullableFilter | boolean | null
    defects?: IntNullableFilter | number | null
    cdf?: IntNullableFilter | number | null
    dar?: IntNullableFilter | number | null
    dcr?: IntNullableFilter | number | null
    pod?: IntNullableFilter | number | null
    cc?: IntNullableFilter | number | null
    sc?: IntNullableFilter | number | null
    has_many_accidents?: IntNullableFilter | number | null
    belongs_to_team?: BoolNullableFilter | boolean | null
    attendance?: JsonNullableFilter
    productivity?: JsonNullableFilter
    accidents?: AccidentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    seatbelt?: SortOrder
    speeding?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
    belongs_to_team?: SortOrder
    attendance?: SortOrder
    productivity?: SortOrder
    accidents?: AccidentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    seatbelt?: SortOrder
    speeding?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
    belongs_to_team?: SortOrder
    attendance?: SortOrder
    productivity?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    role?: EnumRoleWithAggregatesFilter | Role
    firstname?: StringWithAggregatesFilter | string
    lastname?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    fico?: IntNullableWithAggregatesFilter | number | null
    netradyne?: IntNullableWithAggregatesFilter | number | null
    da?: IntNullableWithAggregatesFilter | number | null
    seatbelt?: BoolNullableWithAggregatesFilter | boolean | null
    speeding?: BoolNullableWithAggregatesFilter | boolean | null
    defects?: IntNullableWithAggregatesFilter | number | null
    cdf?: IntNullableWithAggregatesFilter | number | null
    dar?: IntNullableWithAggregatesFilter | number | null
    dcr?: IntNullableWithAggregatesFilter | number | null
    pod?: IntNullableWithAggregatesFilter | number | null
    cc?: IntNullableWithAggregatesFilter | number | null
    sc?: IntNullableWithAggregatesFilter | number | null
    has_many_accidents?: IntNullableWithAggregatesFilter | number | null
    belongs_to_team?: BoolNullableWithAggregatesFilter | boolean | null
    attendance?: JsonNullableWithAggregatesFilter
    productivity?: JsonNullableWithAggregatesFilter
  }

  export type AccidentWhereInput = {
    AND?: Enumerable<AccidentWhereInput>
    OR?: Enumerable<AccidentWhereInput>
    NOT?: Enumerable<AccidentWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    using_safety?: BoolNullableFilter | boolean | null
    safety_failed?: BoolNullableFilter | boolean | null
    number_package_carried?: IntNullableFilter | number | null
    safety_equipment_used?: JsonNullableFilter
    failed_safety?: BoolNullableFilter | boolean | null
    hitPerson?: HitPersonListRelationFilter
    thirdParty?: ThirdPartyListRelationFilter
    injuryAccident?: InjuryAccidentListRelationFilter
    propertyAccident?: PropertyAccidentListRelationFilter
    injuryReport?: InjuryReportListRelationFilter
  }

  export type AccidentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    using_safety?: SortOrder
    safety_failed?: SortOrder
    number_package_carried?: SortOrder
    safety_equipment_used?: SortOrder
    failed_safety?: SortOrder
    hitPerson?: HitPersonOrderByRelationAggregateInput
    thirdParty?: ThirdPartyOrderByRelationAggregateInput
    injuryAccident?: InjuryAccidentOrderByRelationAggregateInput
    propertyAccident?: PropertyAccidentOrderByRelationAggregateInput
    injuryReport?: InjuryReportOrderByRelationAggregateInput
  }

  export type AccidentWhereUniqueInput = {
    id?: number
  }

  export type AccidentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    using_safety?: SortOrder
    safety_failed?: SortOrder
    number_package_carried?: SortOrder
    safety_equipment_used?: SortOrder
    failed_safety?: SortOrder
    _count?: AccidentCountOrderByAggregateInput
    _avg?: AccidentAvgOrderByAggregateInput
    _max?: AccidentMaxOrderByAggregateInput
    _min?: AccidentMinOrderByAggregateInput
    _sum?: AccidentSumOrderByAggregateInput
  }

  export type AccidentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccidentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccidentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccidentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    using_safety?: BoolNullableWithAggregatesFilter | boolean | null
    safety_failed?: BoolNullableWithAggregatesFilter | boolean | null
    number_package_carried?: IntNullableWithAggregatesFilter | number | null
    safety_equipment_used?: JsonNullableWithAggregatesFilter
    failed_safety?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type HitPersonWhereInput = {
    AND?: Enumerable<HitPersonWhereInput>
    OR?: Enumerable<HitPersonWhereInput>
    NOT?: Enumerable<HitPersonWhereInput>
    id?: IntFilter | number
    accidentId?: IntFilter | number
    accident?: AccidentListRelationFilter
    medical_attention?: BoolFilter | boolean
    vehicle_or_pedestrian?: StringFilter | string
    previous_damage?: StringFilter | string
    contact_infomation?: JsonFilter
    injury?: StringFilter | string
    accident_pictures?: ImageListRelationFilter
  }

  export type HitPersonOrderByWithRelationInput = {
    id?: SortOrder
    accidentId?: SortOrder
    accident?: AccidentOrderByRelationAggregateInput
    medical_attention?: SortOrder
    vehicle_or_pedestrian?: SortOrder
    previous_damage?: SortOrder
    contact_infomation?: SortOrder
    injury?: SortOrder
    accident_pictures?: ImageOrderByRelationAggregateInput
  }

  export type HitPersonWhereUniqueInput = {
    id?: number
  }

  export type HitPersonOrderByWithAggregationInput = {
    id?: SortOrder
    accidentId?: SortOrder
    medical_attention?: SortOrder
    vehicle_or_pedestrian?: SortOrder
    previous_damage?: SortOrder
    contact_infomation?: SortOrder
    injury?: SortOrder
    _count?: HitPersonCountOrderByAggregateInput
    _avg?: HitPersonAvgOrderByAggregateInput
    _max?: HitPersonMaxOrderByAggregateInput
    _min?: HitPersonMinOrderByAggregateInput
    _sum?: HitPersonSumOrderByAggregateInput
  }

  export type HitPersonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HitPersonScalarWhereWithAggregatesInput>
    OR?: Enumerable<HitPersonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HitPersonScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    accidentId?: IntWithAggregatesFilter | number
    medical_attention?: BoolWithAggregatesFilter | boolean
    vehicle_or_pedestrian?: StringWithAggregatesFilter | string
    previous_damage?: StringWithAggregatesFilter | string
    contact_infomation?: JsonWithAggregatesFilter
    injury?: StringWithAggregatesFilter | string
  }

  export type ThirdPartyWhereInput = {
    AND?: Enumerable<ThirdPartyWhereInput>
    OR?: Enumerable<ThirdPartyWhereInput>
    NOT?: Enumerable<ThirdPartyWhereInput>
    id?: IntFilter | number
    accidentId?: IntFilter | number
    accident?: AccidentListRelationFilter
    location?: StringFilter | string
  }

  export type ThirdPartyOrderByWithRelationInput = {
    id?: SortOrder
    accidentId?: SortOrder
    accident?: AccidentOrderByRelationAggregateInput
    location?: SortOrder
  }

  export type ThirdPartyWhereUniqueInput = {
    id?: number
  }

  export type ThirdPartyOrderByWithAggregationInput = {
    id?: SortOrder
    accidentId?: SortOrder
    location?: SortOrder
    _count?: ThirdPartyCountOrderByAggregateInput
    _avg?: ThirdPartyAvgOrderByAggregateInput
    _max?: ThirdPartyMaxOrderByAggregateInput
    _min?: ThirdPartyMinOrderByAggregateInput
    _sum?: ThirdPartySumOrderByAggregateInput
  }

  export type ThirdPartyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ThirdPartyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ThirdPartyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ThirdPartyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    accidentId?: IntWithAggregatesFilter | number
    location?: StringWithAggregatesFilter | string
  }

  export type InjuryAccidentWhereInput = {
    AND?: Enumerable<InjuryAccidentWhereInput>
    OR?: Enumerable<InjuryAccidentWhereInput>
    NOT?: Enumerable<InjuryAccidentWhereInput>
    id?: IntFilter | number
    self_injured?: BoolFilter | boolean
    vehicle_number?: StringFilter | string
    amazon_logo?: BoolFilter | boolean
    exact_address?: StringFilter | string
    action_before_accident?: JsonFilter
    police_report?: JsonFilter
    weather?: StringFilter | string
    wet_ground?: BoolFilter | boolean
    slippery_ground?: BoolFilter | boolean
    extra_info?: StringFilter | string
    rushed_prior?: BoolFilter | boolean
    accident_pictures?: ImageListRelationFilter
    accidentId?: IntFilter | number
    accident?: AccidentListRelationFilter
  }

  export type InjuryAccidentOrderByWithRelationInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accident_pictures?: ImageOrderByRelationAggregateInput
    accidentId?: SortOrder
    accident?: AccidentOrderByRelationAggregateInput
  }

  export type InjuryAccidentWhereUniqueInput = {
    id?: number
  }

  export type InjuryAccidentOrderByWithAggregationInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
    _count?: InjuryAccidentCountOrderByAggregateInput
    _avg?: InjuryAccidentAvgOrderByAggregateInput
    _max?: InjuryAccidentMaxOrderByAggregateInput
    _min?: InjuryAccidentMinOrderByAggregateInput
    _sum?: InjuryAccidentSumOrderByAggregateInput
  }

  export type InjuryAccidentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InjuryAccidentScalarWhereWithAggregatesInput>
    OR?: Enumerable<InjuryAccidentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InjuryAccidentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    self_injured?: BoolWithAggregatesFilter | boolean
    vehicle_number?: StringWithAggregatesFilter | string
    amazon_logo?: BoolWithAggregatesFilter | boolean
    exact_address?: StringWithAggregatesFilter | string
    action_before_accident?: JsonWithAggregatesFilter
    police_report?: JsonWithAggregatesFilter
    weather?: StringWithAggregatesFilter | string
    wet_ground?: BoolWithAggregatesFilter | boolean
    slippery_ground?: BoolWithAggregatesFilter | boolean
    extra_info?: StringWithAggregatesFilter | string
    rushed_prior?: BoolWithAggregatesFilter | boolean
    accidentId?: IntWithAggregatesFilter | number
  }

  export type PropertyAccidentWhereInput = {
    AND?: Enumerable<PropertyAccidentWhereInput>
    OR?: Enumerable<PropertyAccidentWhereInput>
    NOT?: Enumerable<PropertyAccidentWhereInput>
    id?: IntFilter | number
    self_injured?: BoolFilter | boolean
    vehicle_number?: StringFilter | string
    amazon_logo?: BoolFilter | boolean
    exact_address?: StringFilter | string
    action_before_accident?: JsonFilter
    police_report?: JsonFilter
    weather?: StringFilter | string
    wet_ground?: BoolFilter | boolean
    slippery_ground?: BoolFilter | boolean
    extra_info?: StringFilter | string
    rushed_prior?: BoolFilter | boolean
    accident_pictures?: ImageListRelationFilter
    accidentId?: IntFilter | number
    accident?: AccidentListRelationFilter
  }

  export type PropertyAccidentOrderByWithRelationInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accident_pictures?: ImageOrderByRelationAggregateInput
    accidentId?: SortOrder
    accident?: AccidentOrderByRelationAggregateInput
  }

  export type PropertyAccidentWhereUniqueInput = {
    id?: number
  }

  export type PropertyAccidentOrderByWithAggregationInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
    _count?: PropertyAccidentCountOrderByAggregateInput
    _avg?: PropertyAccidentAvgOrderByAggregateInput
    _max?: PropertyAccidentMaxOrderByAggregateInput
    _min?: PropertyAccidentMinOrderByAggregateInput
    _sum?: PropertyAccidentSumOrderByAggregateInput
  }

  export type PropertyAccidentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PropertyAccidentScalarWhereWithAggregatesInput>
    OR?: Enumerable<PropertyAccidentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PropertyAccidentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    self_injured?: BoolWithAggregatesFilter | boolean
    vehicle_number?: StringWithAggregatesFilter | string
    amazon_logo?: BoolWithAggregatesFilter | boolean
    exact_address?: StringWithAggregatesFilter | string
    action_before_accident?: JsonWithAggregatesFilter
    police_report?: JsonWithAggregatesFilter
    weather?: StringWithAggregatesFilter | string
    wet_ground?: BoolWithAggregatesFilter | boolean
    slippery_ground?: BoolWithAggregatesFilter | boolean
    extra_info?: StringWithAggregatesFilter | string
    rushed_prior?: BoolWithAggregatesFilter | boolean
    accidentId?: IntWithAggregatesFilter | number
  }

  export type InjuryReportWhereInput = {
    AND?: Enumerable<InjuryReportWhereInput>
    OR?: Enumerable<InjuryReportWhereInput>
    NOT?: Enumerable<InjuryReportWhereInput>
    id?: IntFilter | number
    immediate_attention?: BoolFilter | boolean
    late?: JsonFilter
    self_injured?: BoolFilter | boolean
    injury_type?: JsonFilter
    other_injured?: BoolFilter | boolean
    before_injury?: StringFilter | string
    packages?: JsonFilter
    safety_equipment?: JsonFilter
    unsafe_conditions?: JsonFilter
    pain_level?: IntFilter | number
    addtional_information?: StringFilter | string
    accidentId?: IntFilter | number
    accident?: AccidentListRelationFilter
  }

  export type InjuryReportOrderByWithRelationInput = {
    id?: SortOrder
    immediate_attention?: SortOrder
    late?: SortOrder
    self_injured?: SortOrder
    injury_type?: SortOrder
    other_injured?: SortOrder
    before_injury?: SortOrder
    packages?: SortOrder
    safety_equipment?: SortOrder
    unsafe_conditions?: SortOrder
    pain_level?: SortOrder
    addtional_information?: SortOrder
    accidentId?: SortOrder
    accident?: AccidentOrderByRelationAggregateInput
  }

  export type InjuryReportWhereUniqueInput = {
    id?: number
  }

  export type InjuryReportOrderByWithAggregationInput = {
    id?: SortOrder
    immediate_attention?: SortOrder
    late?: SortOrder
    self_injured?: SortOrder
    injury_type?: SortOrder
    other_injured?: SortOrder
    before_injury?: SortOrder
    packages?: SortOrder
    safety_equipment?: SortOrder
    unsafe_conditions?: SortOrder
    pain_level?: SortOrder
    addtional_information?: SortOrder
    accidentId?: SortOrder
    _count?: InjuryReportCountOrderByAggregateInput
    _avg?: InjuryReportAvgOrderByAggregateInput
    _max?: InjuryReportMaxOrderByAggregateInput
    _min?: InjuryReportMinOrderByAggregateInput
    _sum?: InjuryReportSumOrderByAggregateInput
  }

  export type InjuryReportScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InjuryReportScalarWhereWithAggregatesInput>
    OR?: Enumerable<InjuryReportScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InjuryReportScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    immediate_attention?: BoolWithAggregatesFilter | boolean
    late?: JsonWithAggregatesFilter
    self_injured?: BoolWithAggregatesFilter | boolean
    injury_type?: JsonWithAggregatesFilter
    other_injured?: BoolWithAggregatesFilter | boolean
    before_injury?: StringWithAggregatesFilter | string
    packages?: JsonWithAggregatesFilter
    safety_equipment?: JsonWithAggregatesFilter
    unsafe_conditions?: JsonWithAggregatesFilter
    pain_level?: IntWithAggregatesFilter | number
    addtional_information?: StringWithAggregatesFilter | string
    accidentId?: IntWithAggregatesFilter | number
  }

  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    id?: IntFilter | number
    fieldname?: StringFilter | string
    path?: StringFilter | string
    mimetype?: StringFilter | string
    size?: IntFilter | number
    originalname?: StringFilter | string
    encoding?: StringFilter | string
    destination?: StringFilter | string
    filename?: StringFilter | string
    injuryAccidentId?: IntFilter | number
    injuryAccident?: XOR<InjuryAccidentRelationFilter, InjuryAccidentWhereInput>
    hitPersonId?: IntFilter | number
    hitPerson?: XOR<HitPersonRelationFilter, HitPersonWhereInput>
    propertyAccidentId?: IntFilter | number
    propertyAccident?: XOR<PropertyAccidentRelationFilter, PropertyAccidentWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    fieldname?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    originalname?: SortOrder
    encoding?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    injuryAccidentId?: SortOrder
    injuryAccident?: InjuryAccidentOrderByWithRelationInput
    hitPersonId?: SortOrder
    hitPerson?: HitPersonOrderByWithRelationInput
    propertyAccidentId?: SortOrder
    propertyAccident?: PropertyAccidentOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = {
    id?: number
  }

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    fieldname?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    originalname?: SortOrder
    encoding?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fieldname?: StringWithAggregatesFilter | string
    path?: StringWithAggregatesFilter | string
    mimetype?: StringWithAggregatesFilter | string
    size?: IntWithAggregatesFilter | number
    originalname?: StringWithAggregatesFilter | string
    encoding?: StringWithAggregatesFilter | string
    destination?: StringWithAggregatesFilter | string
    filename?: StringWithAggregatesFilter | string
    injuryAccidentId?: IntWithAggregatesFilter | number
    hitPersonId?: IntWithAggregatesFilter | number
    propertyAccidentId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    role?: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico?: number | null
    netradyne?: number | null
    da?: number | null
    seatbelt?: boolean | null
    speeding?: boolean | null
    defects?: number | null
    cdf?: number | null
    dar?: number | null
    dcr?: number | null
    pod?: number | null
    cc?: number | null
    sc?: number | null
    has_many_accidents?: number | null
    belongs_to_team?: boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
    accidents?: AccidentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    role?: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico?: number | null
    netradyne?: number | null
    da?: number | null
    seatbelt?: boolean | null
    speeding?: boolean | null
    defects?: number | null
    cdf?: number | null
    dar?: number | null
    dcr?: number | null
    pod?: number | null
    cc?: number | null
    sc?: number | null
    has_many_accidents?: number | null
    belongs_to_team?: boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
    accidents?: AccidentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
    accidents?: AccidentUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
    accidents?: AccidentUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    role?: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico?: number | null
    netradyne?: number | null
    da?: number | null
    seatbelt?: boolean | null
    speeding?: boolean | null
    defects?: number | null
    cdf?: number | null
    dar?: number | null
    dcr?: number | null
    pod?: number | null
    cc?: number | null
    sc?: number | null
    has_many_accidents?: number | null
    belongs_to_team?: boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AccidentCreateInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentUpdateInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AccidentCreateManyInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentUpdateManyMutationInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AccidentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type HitPersonCreateInput = {
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
    accident?: AccidentCreateNestedManyWithoutHitPersonInput
    accident_pictures?: ImageCreateNestedManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedCreateInput = {
    id?: number
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutHitPersonInput
  }

  export type HitPersonUpdateInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
    accident?: AccidentUpdateManyWithoutHitPersonInput
    accident_pictures?: ImageUpdateManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
    accident_pictures?: ImageUncheckedUpdateManyWithoutHitPersonInput
  }

  export type HitPersonCreateManyInput = {
    id?: number
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
  }

  export type HitPersonUpdateManyMutationInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
  }

  export type HitPersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyCreateInput = {
    accidentId: number
    location: string
    accident?: AccidentCreateNestedManyWithoutThirdPartyInput
  }

  export type ThirdPartyUncheckedCreateInput = {
    id?: number
    accidentId: number
    location: string
  }

  export type ThirdPartyUpdateInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    accident?: AccidentUpdateManyWithoutThirdPartyInput
  }

  export type ThirdPartyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyCreateManyInput = {
    id?: number
    accidentId: number
    location: string
  }

  export type ThirdPartyUpdateManyMutationInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type InjuryAccidentCreateInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageCreateNestedManyWithoutInjuryAccidentInput
    accident?: AccidentCreateNestedManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedCreateInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUpdateInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUpdateManyWithoutInjuryAccidentInput
    accident?: AccidentUpdateManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUncheckedUpdateManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentCreateManyInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
  }

  export type InjuryAccidentUpdateManyMutationInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryAccidentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type PropertyAccidentCreateInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageCreateNestedManyWithoutPropertyAccidentInput
    accident?: AccidentCreateNestedManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedCreateInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUpdateInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUpdateManyWithoutPropertyAccidentInput
    accident?: AccidentUpdateManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUncheckedUpdateManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentCreateManyInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
  }

  export type PropertyAccidentUpdateManyMutationInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type PropertyAccidentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportCreateInput = {
    immediate_attention: boolean
    late: JsonNullValueInput | InputJsonValue
    self_injured: boolean
    injury_type: JsonNullValueInput | InputJsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonNullValueInput | InputJsonValue
    safety_equipment: JsonNullValueInput | InputJsonValue
    unsafe_conditions: JsonNullValueInput | InputJsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
    accident?: AccidentCreateNestedManyWithoutInjuryReportInput
  }

  export type InjuryReportUncheckedCreateInput = {
    id?: number
    immediate_attention: boolean
    late: JsonNullValueInput | InputJsonValue
    self_injured: boolean
    injury_type: JsonNullValueInput | InputJsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonNullValueInput | InputJsonValue
    safety_equipment: JsonNullValueInput | InputJsonValue
    unsafe_conditions: JsonNullValueInput | InputJsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
  }

  export type InjuryReportUpdateInput = {
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
    accident?: AccidentUpdateManyWithoutInjuryReportInput
  }

  export type InjuryReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportCreateManyInput = {
    id?: number
    immediate_attention: boolean
    late: JsonNullValueInput | InputJsonValue
    self_injured: boolean
    injury_type: JsonNullValueInput | InputJsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonNullValueInput | InputJsonValue
    safety_equipment: JsonNullValueInput | InputJsonValue
    unsafe_conditions: JsonNullValueInput | InputJsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
  }

  export type InjuryReportUpdateManyMutationInput = {
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateInput = {
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccident: InjuryAccidentCreateNestedOneWithoutAccident_picturesInput
    hitPerson: HitPersonCreateNestedOneWithoutAccident_picturesInput
    propertyAccident: PropertyAccidentCreateNestedOneWithoutAccident_picturesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    hitPersonId: number
    propertyAccidentId: number
  }

  export type ImageUpdateInput = {
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccident?: InjuryAccidentUpdateOneRequiredWithoutAccident_picturesInput
    hitPerson?: HitPersonUpdateOneRequiredWithoutAccident_picturesInput
    propertyAccident?: PropertyAccidentUpdateOneRequiredWithoutAccident_picturesInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccidentId?: IntFieldUpdateOperationsInput | number
    hitPersonId?: IntFieldUpdateOperationsInput | number
    propertyAccidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateManyInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    hitPersonId: number
    propertyAccidentId: number
  }

  export type ImageUpdateManyMutationInput = {
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccidentId?: IntFieldUpdateOperationsInput | number
    hitPersonId?: IntFieldUpdateOperationsInput | number
    propertyAccidentId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type AccidentListRelationFilter = {
    every?: AccidentWhereInput
    some?: AccidentWhereInput
    none?: AccidentWhereInput
  }

  export type AccidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    seatbelt?: SortOrder
    speeding?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
    belongs_to_team?: SortOrder
    attendance?: SortOrder
    productivity?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    seatbelt?: SortOrder
    speeding?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
    belongs_to_team?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    seatbelt?: SortOrder
    speeding?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
    belongs_to_team?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    fico?: SortOrder
    netradyne?: SortOrder
    da?: SortOrder
    defects?: SortOrder
    cdf?: SortOrder
    dar?: SortOrder
    dcr?: SortOrder
    pod?: SortOrder
    cc?: SortOrder
    sc?: SortOrder
    has_many_accidents?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HitPersonListRelationFilter = {
    every?: HitPersonWhereInput
    some?: HitPersonWhereInput
    none?: HitPersonWhereInput
  }

  export type ThirdPartyListRelationFilter = {
    every?: ThirdPartyWhereInput
    some?: ThirdPartyWhereInput
    none?: ThirdPartyWhereInput
  }

  export type InjuryAccidentListRelationFilter = {
    every?: InjuryAccidentWhereInput
    some?: InjuryAccidentWhereInput
    none?: InjuryAccidentWhereInput
  }

  export type PropertyAccidentListRelationFilter = {
    every?: PropertyAccidentWhereInput
    some?: PropertyAccidentWhereInput
    none?: PropertyAccidentWhereInput
  }

  export type InjuryReportListRelationFilter = {
    every?: InjuryReportWhereInput
    some?: InjuryReportWhereInput
    none?: InjuryReportWhereInput
  }

  export type HitPersonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThirdPartyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InjuryAccidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyAccidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InjuryReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccidentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    using_safety?: SortOrder
    safety_failed?: SortOrder
    number_package_carried?: SortOrder
    safety_equipment_used?: SortOrder
    failed_safety?: SortOrder
  }

  export type AccidentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number_package_carried?: SortOrder
  }

  export type AccidentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    using_safety?: SortOrder
    safety_failed?: SortOrder
    number_package_carried?: SortOrder
    failed_safety?: SortOrder
  }

  export type AccidentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    using_safety?: SortOrder
    safety_failed?: SortOrder
    number_package_carried?: SortOrder
    failed_safety?: SortOrder
  }

  export type AccidentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number_package_carried?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HitPersonCountOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    medical_attention?: SortOrder
    vehicle_or_pedestrian?: SortOrder
    previous_damage?: SortOrder
    contact_infomation?: SortOrder
    injury?: SortOrder
  }

  export type HitPersonAvgOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type HitPersonMaxOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    medical_attention?: SortOrder
    vehicle_or_pedestrian?: SortOrder
    previous_damage?: SortOrder
    injury?: SortOrder
  }

  export type HitPersonMinOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    medical_attention?: SortOrder
    vehicle_or_pedestrian?: SortOrder
    previous_damage?: SortOrder
    injury?: SortOrder
  }

  export type HitPersonSumOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type ThirdPartyCountOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    location?: SortOrder
  }

  export type ThirdPartyAvgOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type ThirdPartyMaxOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    location?: SortOrder
  }

  export type ThirdPartyMinOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
    location?: SortOrder
  }

  export type ThirdPartySumOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentCountOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentAvgOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentMaxOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentMinOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentSumOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type PropertyAccidentCountOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    action_before_accident?: SortOrder
    police_report?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type PropertyAccidentAvgOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type PropertyAccidentMaxOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type PropertyAccidentMinOrderByAggregateInput = {
    id?: SortOrder
    self_injured?: SortOrder
    vehicle_number?: SortOrder
    amazon_logo?: SortOrder
    exact_address?: SortOrder
    weather?: SortOrder
    wet_ground?: SortOrder
    slippery_ground?: SortOrder
    extra_info?: SortOrder
    rushed_prior?: SortOrder
    accidentId?: SortOrder
  }

  export type PropertyAccidentSumOrderByAggregateInput = {
    id?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryReportCountOrderByAggregateInput = {
    id?: SortOrder
    immediate_attention?: SortOrder
    late?: SortOrder
    self_injured?: SortOrder
    injury_type?: SortOrder
    other_injured?: SortOrder
    before_injury?: SortOrder
    packages?: SortOrder
    safety_equipment?: SortOrder
    unsafe_conditions?: SortOrder
    pain_level?: SortOrder
    addtional_information?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryReportAvgOrderByAggregateInput = {
    id?: SortOrder
    pain_level?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryReportMaxOrderByAggregateInput = {
    id?: SortOrder
    immediate_attention?: SortOrder
    self_injured?: SortOrder
    other_injured?: SortOrder
    before_injury?: SortOrder
    pain_level?: SortOrder
    addtional_information?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryReportMinOrderByAggregateInput = {
    id?: SortOrder
    immediate_attention?: SortOrder
    self_injured?: SortOrder
    other_injured?: SortOrder
    before_injury?: SortOrder
    pain_level?: SortOrder
    addtional_information?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryReportSumOrderByAggregateInput = {
    id?: SortOrder
    pain_level?: SortOrder
    accidentId?: SortOrder
  }

  export type InjuryAccidentRelationFilter = {
    is?: InjuryAccidentWhereInput
    isNot?: InjuryAccidentWhereInput
  }

  export type HitPersonRelationFilter = {
    is?: HitPersonWhereInput
    isNot?: HitPersonWhereInput
  }

  export type PropertyAccidentRelationFilter = {
    is?: PropertyAccidentWhereInput
    isNot?: PropertyAccidentWhereInput
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    fieldname?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    originalname?: SortOrder
    encoding?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    fieldname?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    originalname?: SortOrder
    encoding?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    fieldname?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    originalname?: SortOrder
    encoding?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    injuryAccidentId?: SortOrder
    hitPersonId?: SortOrder
    propertyAccidentId?: SortOrder
  }

  export type AccidentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutUserInput>, Enumerable<AccidentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutUserInput>
    createMany?: AccidentCreateManyUserInputEnvelope
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type AccidentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutUserInput>, Enumerable<AccidentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutUserInput>
    createMany?: AccidentCreateManyUserInputEnvelope
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type AccidentUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutUserInput>, Enumerable<AccidentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccidentCreateManyUserInputEnvelope
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccidentUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutUserInput>, Enumerable<AccidentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccidentCreateManyUserInputEnvelope
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccidentsInput = {
    create?: XOR<UserCreateWithoutAccidentsInput, UserUncheckedCreateWithoutAccidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccidentsInput
    connect?: UserWhereUniqueInput
  }

  export type HitPersonCreateNestedManyWithoutAccidentInput = {
    create?: XOR<Enumerable<HitPersonCreateWithoutAccidentInput>, Enumerable<HitPersonUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<HitPersonCreateOrConnectWithoutAccidentInput>
    connect?: Enumerable<HitPersonWhereUniqueInput>
  }

  export type ThirdPartyCreateNestedManyWithoutAccidentInput = {
    create?: XOR<Enumerable<ThirdPartyCreateWithoutAccidentInput>, Enumerable<ThirdPartyUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<ThirdPartyCreateOrConnectWithoutAccidentInput>
    connect?: Enumerable<ThirdPartyWhereUniqueInput>
  }

  export type InjuryAccidentCreateNestedManyWithoutAccidentInput = {
    create?: XOR<Enumerable<InjuryAccidentCreateWithoutAccidentInput>, Enumerable<InjuryAccidentUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<InjuryAccidentCreateOrConnectWithoutAccidentInput>
    connect?: Enumerable<InjuryAccidentWhereUniqueInput>
  }

  export type PropertyAccidentCreateNestedManyWithoutAccidentInput = {
    create?: XOR<Enumerable<PropertyAccidentCreateWithoutAccidentInput>, Enumerable<PropertyAccidentUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<PropertyAccidentCreateOrConnectWithoutAccidentInput>
    connect?: Enumerable<PropertyAccidentWhereUniqueInput>
  }

  export type InjuryReportCreateNestedManyWithoutAccidentInput = {
    create?: XOR<Enumerable<InjuryReportCreateWithoutAccidentInput>, Enumerable<InjuryReportUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<InjuryReportCreateOrConnectWithoutAccidentInput>
    connect?: Enumerable<InjuryReportWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutAccidentsInput = {
    create?: XOR<UserCreateWithoutAccidentsInput, UserUncheckedCreateWithoutAccidentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccidentsInput
    upsert?: UserUpsertWithoutAccidentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccidentsInput, UserUncheckedUpdateWithoutAccidentsInput>
  }

  export type HitPersonUpdateManyWithoutAccidentInput = {
    create?: XOR<Enumerable<HitPersonCreateWithoutAccidentInput>, Enumerable<HitPersonUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<HitPersonCreateOrConnectWithoutAccidentInput>
    upsert?: Enumerable<HitPersonUpsertWithWhereUniqueWithoutAccidentInput>
    set?: Enumerable<HitPersonWhereUniqueInput>
    disconnect?: Enumerable<HitPersonWhereUniqueInput>
    delete?: Enumerable<HitPersonWhereUniqueInput>
    connect?: Enumerable<HitPersonWhereUniqueInput>
    update?: Enumerable<HitPersonUpdateWithWhereUniqueWithoutAccidentInput>
    updateMany?: Enumerable<HitPersonUpdateManyWithWhereWithoutAccidentInput>
    deleteMany?: Enumerable<HitPersonScalarWhereInput>
  }

  export type ThirdPartyUpdateManyWithoutAccidentInput = {
    create?: XOR<Enumerable<ThirdPartyCreateWithoutAccidentInput>, Enumerable<ThirdPartyUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<ThirdPartyCreateOrConnectWithoutAccidentInput>
    upsert?: Enumerable<ThirdPartyUpsertWithWhereUniqueWithoutAccidentInput>
    set?: Enumerable<ThirdPartyWhereUniqueInput>
    disconnect?: Enumerable<ThirdPartyWhereUniqueInput>
    delete?: Enumerable<ThirdPartyWhereUniqueInput>
    connect?: Enumerable<ThirdPartyWhereUniqueInput>
    update?: Enumerable<ThirdPartyUpdateWithWhereUniqueWithoutAccidentInput>
    updateMany?: Enumerable<ThirdPartyUpdateManyWithWhereWithoutAccidentInput>
    deleteMany?: Enumerable<ThirdPartyScalarWhereInput>
  }

  export type InjuryAccidentUpdateManyWithoutAccidentInput = {
    create?: XOR<Enumerable<InjuryAccidentCreateWithoutAccidentInput>, Enumerable<InjuryAccidentUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<InjuryAccidentCreateOrConnectWithoutAccidentInput>
    upsert?: Enumerable<InjuryAccidentUpsertWithWhereUniqueWithoutAccidentInput>
    set?: Enumerable<InjuryAccidentWhereUniqueInput>
    disconnect?: Enumerable<InjuryAccidentWhereUniqueInput>
    delete?: Enumerable<InjuryAccidentWhereUniqueInput>
    connect?: Enumerable<InjuryAccidentWhereUniqueInput>
    update?: Enumerable<InjuryAccidentUpdateWithWhereUniqueWithoutAccidentInput>
    updateMany?: Enumerable<InjuryAccidentUpdateManyWithWhereWithoutAccidentInput>
    deleteMany?: Enumerable<InjuryAccidentScalarWhereInput>
  }

  export type PropertyAccidentUpdateManyWithoutAccidentInput = {
    create?: XOR<Enumerable<PropertyAccidentCreateWithoutAccidentInput>, Enumerable<PropertyAccidentUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<PropertyAccidentCreateOrConnectWithoutAccidentInput>
    upsert?: Enumerable<PropertyAccidentUpsertWithWhereUniqueWithoutAccidentInput>
    set?: Enumerable<PropertyAccidentWhereUniqueInput>
    disconnect?: Enumerable<PropertyAccidentWhereUniqueInput>
    delete?: Enumerable<PropertyAccidentWhereUniqueInput>
    connect?: Enumerable<PropertyAccidentWhereUniqueInput>
    update?: Enumerable<PropertyAccidentUpdateWithWhereUniqueWithoutAccidentInput>
    updateMany?: Enumerable<PropertyAccidentUpdateManyWithWhereWithoutAccidentInput>
    deleteMany?: Enumerable<PropertyAccidentScalarWhereInput>
  }

  export type InjuryReportUpdateManyWithoutAccidentInput = {
    create?: XOR<Enumerable<InjuryReportCreateWithoutAccidentInput>, Enumerable<InjuryReportUncheckedCreateWithoutAccidentInput>>
    connectOrCreate?: Enumerable<InjuryReportCreateOrConnectWithoutAccidentInput>
    upsert?: Enumerable<InjuryReportUpsertWithWhereUniqueWithoutAccidentInput>
    set?: Enumerable<InjuryReportWhereUniqueInput>
    disconnect?: Enumerable<InjuryReportWhereUniqueInput>
    delete?: Enumerable<InjuryReportWhereUniqueInput>
    connect?: Enumerable<InjuryReportWhereUniqueInput>
    update?: Enumerable<InjuryReportUpdateWithWhereUniqueWithoutAccidentInput>
    updateMany?: Enumerable<InjuryReportUpdateManyWithWhereWithoutAccidentInput>
    deleteMany?: Enumerable<InjuryReportScalarWhereInput>
  }

  export type AccidentCreateNestedManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutHitPersonInput>, Enumerable<AccidentUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutHitPersonInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type ImageCreateNestedManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<ImageCreateWithoutHitPersonInput>, Enumerable<ImageUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutHitPersonInput>
    createMany?: ImageCreateManyHitPersonInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type ImageUncheckedCreateNestedManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<ImageCreateWithoutHitPersonInput>, Enumerable<ImageUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutHitPersonInput>
    createMany?: ImageCreateManyHitPersonInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccidentUpdateManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutHitPersonInput>, Enumerable<AccidentUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutHitPersonInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutHitPersonInput>
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutHitPersonInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutHitPersonInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type ImageUpdateManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<ImageCreateWithoutHitPersonInput>, Enumerable<ImageUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutHitPersonInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutHitPersonInput>
    createMany?: ImageCreateManyHitPersonInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutHitPersonInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutHitPersonInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type ImageUncheckedUpdateManyWithoutHitPersonInput = {
    create?: XOR<Enumerable<ImageCreateWithoutHitPersonInput>, Enumerable<ImageUncheckedCreateWithoutHitPersonInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutHitPersonInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutHitPersonInput>
    createMany?: ImageCreateManyHitPersonInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutHitPersonInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutHitPersonInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type AccidentCreateNestedManyWithoutThirdPartyInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutThirdPartyInput>, Enumerable<AccidentUncheckedCreateWithoutThirdPartyInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutThirdPartyInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type AccidentUpdateManyWithoutThirdPartyInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutThirdPartyInput>, Enumerable<AccidentUncheckedCreateWithoutThirdPartyInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutThirdPartyInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutThirdPartyInput>
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutThirdPartyInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutThirdPartyInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type ImageCreateNestedManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutInjuryAccidentInput>, Enumerable<ImageUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutInjuryAccidentInput>
    createMany?: ImageCreateManyInjuryAccidentInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type AccidentCreateNestedManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutInjuryAccidentInput>, Enumerable<AccidentUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutInjuryAccidentInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type ImageUncheckedCreateNestedManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutInjuryAccidentInput>, Enumerable<ImageUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutInjuryAccidentInput>
    createMany?: ImageCreateManyInjuryAccidentInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type ImageUpdateManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutInjuryAccidentInput>, Enumerable<ImageUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutInjuryAccidentInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutInjuryAccidentInput>
    createMany?: ImageCreateManyInjuryAccidentInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutInjuryAccidentInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutInjuryAccidentInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type AccidentUpdateManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutInjuryAccidentInput>, Enumerable<AccidentUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutInjuryAccidentInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutInjuryAccidentInput>
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutInjuryAccidentInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutInjuryAccidentInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type ImageUncheckedUpdateManyWithoutInjuryAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutInjuryAccidentInput>, Enumerable<ImageUncheckedCreateWithoutInjuryAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutInjuryAccidentInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutInjuryAccidentInput>
    createMany?: ImageCreateManyInjuryAccidentInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutInjuryAccidentInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutInjuryAccidentInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type ImageCreateNestedManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutPropertyAccidentInput>, Enumerable<ImageUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPropertyAccidentInput>
    createMany?: ImageCreateManyPropertyAccidentInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type AccidentCreateNestedManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutPropertyAccidentInput>, Enumerable<AccidentUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutPropertyAccidentInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type ImageUncheckedCreateNestedManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutPropertyAccidentInput>, Enumerable<ImageUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPropertyAccidentInput>
    createMany?: ImageCreateManyPropertyAccidentInputEnvelope
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type ImageUpdateManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutPropertyAccidentInput>, Enumerable<ImageUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPropertyAccidentInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutPropertyAccidentInput>
    createMany?: ImageCreateManyPropertyAccidentInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutPropertyAccidentInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutPropertyAccidentInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type AccidentUpdateManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutPropertyAccidentInput>, Enumerable<AccidentUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutPropertyAccidentInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutPropertyAccidentInput>
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutPropertyAccidentInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutPropertyAccidentInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type ImageUncheckedUpdateManyWithoutPropertyAccidentInput = {
    create?: XOR<Enumerable<ImageCreateWithoutPropertyAccidentInput>, Enumerable<ImageUncheckedCreateWithoutPropertyAccidentInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPropertyAccidentInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutPropertyAccidentInput>
    createMany?: ImageCreateManyPropertyAccidentInputEnvelope
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutPropertyAccidentInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutPropertyAccidentInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type AccidentCreateNestedManyWithoutInjuryReportInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutInjuryReportInput>, Enumerable<AccidentUncheckedCreateWithoutInjuryReportInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutInjuryReportInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
  }

  export type AccidentUpdateManyWithoutInjuryReportInput = {
    create?: XOR<Enumerable<AccidentCreateWithoutInjuryReportInput>, Enumerable<AccidentUncheckedCreateWithoutInjuryReportInput>>
    connectOrCreate?: Enumerable<AccidentCreateOrConnectWithoutInjuryReportInput>
    upsert?: Enumerable<AccidentUpsertWithWhereUniqueWithoutInjuryReportInput>
    set?: Enumerable<AccidentWhereUniqueInput>
    disconnect?: Enumerable<AccidentWhereUniqueInput>
    delete?: Enumerable<AccidentWhereUniqueInput>
    connect?: Enumerable<AccidentWhereUniqueInput>
    update?: Enumerable<AccidentUpdateWithWhereUniqueWithoutInjuryReportInput>
    updateMany?: Enumerable<AccidentUpdateManyWithWhereWithoutInjuryReportInput>
    deleteMany?: Enumerable<AccidentScalarWhereInput>
  }

  export type InjuryAccidentCreateNestedOneWithoutAccident_picturesInput = {
    create?: XOR<InjuryAccidentCreateWithoutAccident_picturesInput, InjuryAccidentUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: InjuryAccidentCreateOrConnectWithoutAccident_picturesInput
    connect?: InjuryAccidentWhereUniqueInput
  }

  export type HitPersonCreateNestedOneWithoutAccident_picturesInput = {
    create?: XOR<HitPersonCreateWithoutAccident_picturesInput, HitPersonUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: HitPersonCreateOrConnectWithoutAccident_picturesInput
    connect?: HitPersonWhereUniqueInput
  }

  export type PropertyAccidentCreateNestedOneWithoutAccident_picturesInput = {
    create?: XOR<PropertyAccidentCreateWithoutAccident_picturesInput, PropertyAccidentUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: PropertyAccidentCreateOrConnectWithoutAccident_picturesInput
    connect?: PropertyAccidentWhereUniqueInput
  }

  export type InjuryAccidentUpdateOneRequiredWithoutAccident_picturesInput = {
    create?: XOR<InjuryAccidentCreateWithoutAccident_picturesInput, InjuryAccidentUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: InjuryAccidentCreateOrConnectWithoutAccident_picturesInput
    upsert?: InjuryAccidentUpsertWithoutAccident_picturesInput
    connect?: InjuryAccidentWhereUniqueInput
    update?: XOR<InjuryAccidentUpdateWithoutAccident_picturesInput, InjuryAccidentUncheckedUpdateWithoutAccident_picturesInput>
  }

  export type HitPersonUpdateOneRequiredWithoutAccident_picturesInput = {
    create?: XOR<HitPersonCreateWithoutAccident_picturesInput, HitPersonUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: HitPersonCreateOrConnectWithoutAccident_picturesInput
    upsert?: HitPersonUpsertWithoutAccident_picturesInput
    connect?: HitPersonWhereUniqueInput
    update?: XOR<HitPersonUpdateWithoutAccident_picturesInput, HitPersonUncheckedUpdateWithoutAccident_picturesInput>
  }

  export type PropertyAccidentUpdateOneRequiredWithoutAccident_picturesInput = {
    create?: XOR<PropertyAccidentCreateWithoutAccident_picturesInput, PropertyAccidentUncheckedCreateWithoutAccident_picturesInput>
    connectOrCreate?: PropertyAccidentCreateOrConnectWithoutAccident_picturesInput
    upsert?: PropertyAccidentUpsertWithoutAccident_picturesInput
    connect?: PropertyAccidentWhereUniqueInput
    update?: XOR<PropertyAccidentUpdateWithoutAccident_picturesInput, PropertyAccidentUncheckedUpdateWithoutAccident_picturesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type AccidentCreateWithoutUserInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutUserInput = {
    id?: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutUserInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutUserInput, AccidentUncheckedCreateWithoutUserInput>
  }

  export type AccidentCreateManyUserInputEnvelope = {
    data: Enumerable<AccidentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccidentUpsertWithWhereUniqueWithoutUserInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutUserInput, AccidentUncheckedUpdateWithoutUserInput>
    create: XOR<AccidentCreateWithoutUserInput, AccidentUncheckedCreateWithoutUserInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutUserInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutUserInput, AccidentUncheckedUpdateWithoutUserInput>
  }

  export type AccidentUpdateManyWithWhereWithoutUserInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentsInput>
  }

  export type AccidentScalarWhereInput = {
    AND?: Enumerable<AccidentScalarWhereInput>
    OR?: Enumerable<AccidentScalarWhereInput>
    NOT?: Enumerable<AccidentScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    using_safety?: BoolNullableFilter | boolean | null
    safety_failed?: BoolNullableFilter | boolean | null
    number_package_carried?: IntNullableFilter | number | null
    safety_equipment_used?: JsonNullableFilter
    failed_safety?: BoolNullableFilter | boolean | null
  }

  export type UserCreateWithoutAccidentsInput = {
    role?: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico?: number | null
    netradyne?: number | null
    da?: number | null
    seatbelt?: boolean | null
    speeding?: boolean | null
    defects?: number | null
    cdf?: number | null
    dar?: number | null
    dcr?: number | null
    pod?: number | null
    cc?: number | null
    sc?: number | null
    has_many_accidents?: number | null
    belongs_to_team?: boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedCreateWithoutAccidentsInput = {
    id?: number
    role?: Role
    firstname: string
    lastname: string
    username: string
    email: string
    password: string
    fico?: number | null
    netradyne?: number | null
    da?: number | null
    seatbelt?: boolean | null
    speeding?: boolean | null
    defects?: number | null
    cdf?: number | null
    dar?: number | null
    dcr?: number | null
    pod?: number | null
    cc?: number | null
    sc?: number | null
    has_many_accidents?: number | null
    belongs_to_team?: boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserCreateOrConnectWithoutAccidentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccidentsInput, UserUncheckedCreateWithoutAccidentsInput>
  }

  export type HitPersonCreateWithoutAccidentInput = {
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
    accident_pictures?: ImageCreateNestedManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedCreateWithoutAccidentInput = {
    id?: number
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutHitPersonInput
  }

  export type HitPersonCreateOrConnectWithoutAccidentInput = {
    where: HitPersonWhereUniqueInput
    create: XOR<HitPersonCreateWithoutAccidentInput, HitPersonUncheckedCreateWithoutAccidentInput>
  }

  export type ThirdPartyCreateWithoutAccidentInput = {
    accidentId: number
    location: string
  }

  export type ThirdPartyUncheckedCreateWithoutAccidentInput = {
    id?: number
    accidentId: number
    location: string
  }

  export type ThirdPartyCreateOrConnectWithoutAccidentInput = {
    where: ThirdPartyWhereUniqueInput
    create: XOR<ThirdPartyCreateWithoutAccidentInput, ThirdPartyUncheckedCreateWithoutAccidentInput>
  }

  export type InjuryAccidentCreateWithoutAccidentInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageCreateNestedManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedCreateWithoutAccidentInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentCreateOrConnectWithoutAccidentInput = {
    where: InjuryAccidentWhereUniqueInput
    create: XOR<InjuryAccidentCreateWithoutAccidentInput, InjuryAccidentUncheckedCreateWithoutAccidentInput>
  }

  export type PropertyAccidentCreateWithoutAccidentInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageCreateNestedManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedCreateWithoutAccidentInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident_pictures?: ImageUncheckedCreateNestedManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentCreateOrConnectWithoutAccidentInput = {
    where: PropertyAccidentWhereUniqueInput
    create: XOR<PropertyAccidentCreateWithoutAccidentInput, PropertyAccidentUncheckedCreateWithoutAccidentInput>
  }

  export type InjuryReportCreateWithoutAccidentInput = {
    immediate_attention: boolean
    late: JsonNullValueInput | InputJsonValue
    self_injured: boolean
    injury_type: JsonNullValueInput | InputJsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonNullValueInput | InputJsonValue
    safety_equipment: JsonNullValueInput | InputJsonValue
    unsafe_conditions: JsonNullValueInput | InputJsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
  }

  export type InjuryReportUncheckedCreateWithoutAccidentInput = {
    id?: number
    immediate_attention: boolean
    late: JsonNullValueInput | InputJsonValue
    self_injured: boolean
    injury_type: JsonNullValueInput | InputJsonValue
    other_injured: boolean
    before_injury: string
    packages: JsonNullValueInput | InputJsonValue
    safety_equipment: JsonNullValueInput | InputJsonValue
    unsafe_conditions: JsonNullValueInput | InputJsonValue
    pain_level: number
    addtional_information: string
    accidentId: number
  }

  export type InjuryReportCreateOrConnectWithoutAccidentInput = {
    where: InjuryReportWhereUniqueInput
    create: XOR<InjuryReportCreateWithoutAccidentInput, InjuryReportUncheckedCreateWithoutAccidentInput>
  }

  export type UserUpsertWithoutAccidentsInput = {
    update: XOR<UserUpdateWithoutAccidentsInput, UserUncheckedUpdateWithoutAccidentsInput>
    create: XOR<UserCreateWithoutAccidentsInput, UserUncheckedCreateWithoutAccidentsInput>
  }

  export type UserUpdateWithoutAccidentsInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateWithoutAccidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fico?: NullableIntFieldUpdateOperationsInput | number | null
    netradyne?: NullableIntFieldUpdateOperationsInput | number | null
    da?: NullableIntFieldUpdateOperationsInput | number | null
    seatbelt?: NullableBoolFieldUpdateOperationsInput | boolean | null
    speeding?: NullableBoolFieldUpdateOperationsInput | boolean | null
    defects?: NullableIntFieldUpdateOperationsInput | number | null
    cdf?: NullableIntFieldUpdateOperationsInput | number | null
    dar?: NullableIntFieldUpdateOperationsInput | number | null
    dcr?: NullableIntFieldUpdateOperationsInput | number | null
    pod?: NullableIntFieldUpdateOperationsInput | number | null
    cc?: NullableIntFieldUpdateOperationsInput | number | null
    sc?: NullableIntFieldUpdateOperationsInput | number | null
    has_many_accidents?: NullableIntFieldUpdateOperationsInput | number | null
    belongs_to_team?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attendance?: NullableJsonNullValueInput | InputJsonValue
    productivity?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HitPersonUpsertWithWhereUniqueWithoutAccidentInput = {
    where: HitPersonWhereUniqueInput
    update: XOR<HitPersonUpdateWithoutAccidentInput, HitPersonUncheckedUpdateWithoutAccidentInput>
    create: XOR<HitPersonCreateWithoutAccidentInput, HitPersonUncheckedCreateWithoutAccidentInput>
  }

  export type HitPersonUpdateWithWhereUniqueWithoutAccidentInput = {
    where: HitPersonWhereUniqueInput
    data: XOR<HitPersonUpdateWithoutAccidentInput, HitPersonUncheckedUpdateWithoutAccidentInput>
  }

  export type HitPersonUpdateManyWithWhereWithoutAccidentInput = {
    where: HitPersonScalarWhereInput
    data: XOR<HitPersonUpdateManyMutationInput, HitPersonUncheckedUpdateManyWithoutHitPersonInput>
  }

  export type HitPersonScalarWhereInput = {
    AND?: Enumerable<HitPersonScalarWhereInput>
    OR?: Enumerable<HitPersonScalarWhereInput>
    NOT?: Enumerable<HitPersonScalarWhereInput>
    id?: IntFilter | number
    accidentId?: IntFilter | number
    medical_attention?: BoolFilter | boolean
    vehicle_or_pedestrian?: StringFilter | string
    previous_damage?: StringFilter | string
    contact_infomation?: JsonFilter
    injury?: StringFilter | string
  }

  export type ThirdPartyUpsertWithWhereUniqueWithoutAccidentInput = {
    where: ThirdPartyWhereUniqueInput
    update: XOR<ThirdPartyUpdateWithoutAccidentInput, ThirdPartyUncheckedUpdateWithoutAccidentInput>
    create: XOR<ThirdPartyCreateWithoutAccidentInput, ThirdPartyUncheckedCreateWithoutAccidentInput>
  }

  export type ThirdPartyUpdateWithWhereUniqueWithoutAccidentInput = {
    where: ThirdPartyWhereUniqueInput
    data: XOR<ThirdPartyUpdateWithoutAccidentInput, ThirdPartyUncheckedUpdateWithoutAccidentInput>
  }

  export type ThirdPartyUpdateManyWithWhereWithoutAccidentInput = {
    where: ThirdPartyScalarWhereInput
    data: XOR<ThirdPartyUpdateManyMutationInput, ThirdPartyUncheckedUpdateManyWithoutThirdPartyInput>
  }

  export type ThirdPartyScalarWhereInput = {
    AND?: Enumerable<ThirdPartyScalarWhereInput>
    OR?: Enumerable<ThirdPartyScalarWhereInput>
    NOT?: Enumerable<ThirdPartyScalarWhereInput>
    id?: IntFilter | number
    accidentId?: IntFilter | number
    location?: StringFilter | string
  }

  export type InjuryAccidentUpsertWithWhereUniqueWithoutAccidentInput = {
    where: InjuryAccidentWhereUniqueInput
    update: XOR<InjuryAccidentUpdateWithoutAccidentInput, InjuryAccidentUncheckedUpdateWithoutAccidentInput>
    create: XOR<InjuryAccidentCreateWithoutAccidentInput, InjuryAccidentUncheckedCreateWithoutAccidentInput>
  }

  export type InjuryAccidentUpdateWithWhereUniqueWithoutAccidentInput = {
    where: InjuryAccidentWhereUniqueInput
    data: XOR<InjuryAccidentUpdateWithoutAccidentInput, InjuryAccidentUncheckedUpdateWithoutAccidentInput>
  }

  export type InjuryAccidentUpdateManyWithWhereWithoutAccidentInput = {
    where: InjuryAccidentScalarWhereInput
    data: XOR<InjuryAccidentUpdateManyMutationInput, InjuryAccidentUncheckedUpdateManyWithoutInjuryAccidentInput>
  }

  export type InjuryAccidentScalarWhereInput = {
    AND?: Enumerable<InjuryAccidentScalarWhereInput>
    OR?: Enumerable<InjuryAccidentScalarWhereInput>
    NOT?: Enumerable<InjuryAccidentScalarWhereInput>
    id?: IntFilter | number
    self_injured?: BoolFilter | boolean
    vehicle_number?: StringFilter | string
    amazon_logo?: BoolFilter | boolean
    exact_address?: StringFilter | string
    action_before_accident?: JsonFilter
    police_report?: JsonFilter
    weather?: StringFilter | string
    wet_ground?: BoolFilter | boolean
    slippery_ground?: BoolFilter | boolean
    extra_info?: StringFilter | string
    rushed_prior?: BoolFilter | boolean
    accidentId?: IntFilter | number
  }

  export type PropertyAccidentUpsertWithWhereUniqueWithoutAccidentInput = {
    where: PropertyAccidentWhereUniqueInput
    update: XOR<PropertyAccidentUpdateWithoutAccidentInput, PropertyAccidentUncheckedUpdateWithoutAccidentInput>
    create: XOR<PropertyAccidentCreateWithoutAccidentInput, PropertyAccidentUncheckedCreateWithoutAccidentInput>
  }

  export type PropertyAccidentUpdateWithWhereUniqueWithoutAccidentInput = {
    where: PropertyAccidentWhereUniqueInput
    data: XOR<PropertyAccidentUpdateWithoutAccidentInput, PropertyAccidentUncheckedUpdateWithoutAccidentInput>
  }

  export type PropertyAccidentUpdateManyWithWhereWithoutAccidentInput = {
    where: PropertyAccidentScalarWhereInput
    data: XOR<PropertyAccidentUpdateManyMutationInput, PropertyAccidentUncheckedUpdateManyWithoutPropertyAccidentInput>
  }

  export type PropertyAccidentScalarWhereInput = {
    AND?: Enumerable<PropertyAccidentScalarWhereInput>
    OR?: Enumerable<PropertyAccidentScalarWhereInput>
    NOT?: Enumerable<PropertyAccidentScalarWhereInput>
    id?: IntFilter | number
    self_injured?: BoolFilter | boolean
    vehicle_number?: StringFilter | string
    amazon_logo?: BoolFilter | boolean
    exact_address?: StringFilter | string
    action_before_accident?: JsonFilter
    police_report?: JsonFilter
    weather?: StringFilter | string
    wet_ground?: BoolFilter | boolean
    slippery_ground?: BoolFilter | boolean
    extra_info?: StringFilter | string
    rushed_prior?: BoolFilter | boolean
    accidentId?: IntFilter | number
  }

  export type InjuryReportUpsertWithWhereUniqueWithoutAccidentInput = {
    where: InjuryReportWhereUniqueInput
    update: XOR<InjuryReportUpdateWithoutAccidentInput, InjuryReportUncheckedUpdateWithoutAccidentInput>
    create: XOR<InjuryReportCreateWithoutAccidentInput, InjuryReportUncheckedCreateWithoutAccidentInput>
  }

  export type InjuryReportUpdateWithWhereUniqueWithoutAccidentInput = {
    where: InjuryReportWhereUniqueInput
    data: XOR<InjuryReportUpdateWithoutAccidentInput, InjuryReportUncheckedUpdateWithoutAccidentInput>
  }

  export type InjuryReportUpdateManyWithWhereWithoutAccidentInput = {
    where: InjuryReportScalarWhereInput
    data: XOR<InjuryReportUpdateManyMutationInput, InjuryReportUncheckedUpdateManyWithoutInjuryReportInput>
  }

  export type InjuryReportScalarWhereInput = {
    AND?: Enumerable<InjuryReportScalarWhereInput>
    OR?: Enumerable<InjuryReportScalarWhereInput>
    NOT?: Enumerable<InjuryReportScalarWhereInput>
    id?: IntFilter | number
    immediate_attention?: BoolFilter | boolean
    late?: JsonFilter
    self_injured?: BoolFilter | boolean
    injury_type?: JsonFilter
    other_injured?: BoolFilter | boolean
    before_injury?: StringFilter | string
    packages?: JsonFilter
    safety_equipment?: JsonFilter
    unsafe_conditions?: JsonFilter
    pain_level?: IntFilter | number
    addtional_information?: StringFilter | string
    accidentId?: IntFilter | number
  }

  export type AccidentCreateWithoutHitPersonInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutHitPersonInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutHitPersonInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutHitPersonInput, AccidentUncheckedCreateWithoutHitPersonInput>
  }

  export type ImageCreateWithoutHitPersonInput = {
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccident: InjuryAccidentCreateNestedOneWithoutAccident_picturesInput
    propertyAccident: PropertyAccidentCreateNestedOneWithoutAccident_picturesInput
  }

  export type ImageUncheckedCreateWithoutHitPersonInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    propertyAccidentId: number
  }

  export type ImageCreateOrConnectWithoutHitPersonInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutHitPersonInput, ImageUncheckedCreateWithoutHitPersonInput>
  }

  export type ImageCreateManyHitPersonInputEnvelope = {
    data: Enumerable<ImageCreateManyHitPersonInput>
    skipDuplicates?: boolean
  }

  export type AccidentUpsertWithWhereUniqueWithoutHitPersonInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutHitPersonInput, AccidentUncheckedUpdateWithoutHitPersonInput>
    create: XOR<AccidentCreateWithoutHitPersonInput, AccidentUncheckedCreateWithoutHitPersonInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutHitPersonInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutHitPersonInput, AccidentUncheckedUpdateWithoutHitPersonInput>
  }

  export type AccidentUpdateManyWithWhereWithoutHitPersonInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutHitPersonInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutHitPersonInput, ImageUncheckedUpdateWithoutHitPersonInput>
    create: XOR<ImageCreateWithoutHitPersonInput, ImageUncheckedCreateWithoutHitPersonInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutHitPersonInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutHitPersonInput, ImageUncheckedUpdateWithoutHitPersonInput>
  }

  export type ImageUpdateManyWithWhereWithoutHitPersonInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutAccident_picturesInput>
  }

  export type ImageScalarWhereInput = {
    AND?: Enumerable<ImageScalarWhereInput>
    OR?: Enumerable<ImageScalarWhereInput>
    NOT?: Enumerable<ImageScalarWhereInput>
    id?: IntFilter | number
    fieldname?: StringFilter | string
    path?: StringFilter | string
    mimetype?: StringFilter | string
    size?: IntFilter | number
    originalname?: StringFilter | string
    encoding?: StringFilter | string
    destination?: StringFilter | string
    filename?: StringFilter | string
    injuryAccidentId?: IntFilter | number
    hitPersonId?: IntFilter | number
    propertyAccidentId?: IntFilter | number
  }

  export type AccidentCreateWithoutThirdPartyInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutThirdPartyInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutThirdPartyInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutThirdPartyInput, AccidentUncheckedCreateWithoutThirdPartyInput>
  }

  export type AccidentUpsertWithWhereUniqueWithoutThirdPartyInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutThirdPartyInput, AccidentUncheckedUpdateWithoutThirdPartyInput>
    create: XOR<AccidentCreateWithoutThirdPartyInput, AccidentUncheckedCreateWithoutThirdPartyInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutThirdPartyInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutThirdPartyInput, AccidentUncheckedUpdateWithoutThirdPartyInput>
  }

  export type AccidentUpdateManyWithWhereWithoutThirdPartyInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentInput>
  }

  export type ImageCreateWithoutInjuryAccidentInput = {
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    hitPerson: HitPersonCreateNestedOneWithoutAccident_picturesInput
    propertyAccident: PropertyAccidentCreateNestedOneWithoutAccident_picturesInput
  }

  export type ImageUncheckedCreateWithoutInjuryAccidentInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    hitPersonId: number
    propertyAccidentId: number
  }

  export type ImageCreateOrConnectWithoutInjuryAccidentInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutInjuryAccidentInput, ImageUncheckedCreateWithoutInjuryAccidentInput>
  }

  export type ImageCreateManyInjuryAccidentInputEnvelope = {
    data: Enumerable<ImageCreateManyInjuryAccidentInput>
    skipDuplicates?: boolean
  }

  export type AccidentCreateWithoutInjuryAccidentInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutInjuryAccidentInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutInjuryAccidentInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutInjuryAccidentInput, AccidentUncheckedCreateWithoutInjuryAccidentInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutInjuryAccidentInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutInjuryAccidentInput, ImageUncheckedUpdateWithoutInjuryAccidentInput>
    create: XOR<ImageCreateWithoutInjuryAccidentInput, ImageUncheckedCreateWithoutInjuryAccidentInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutInjuryAccidentInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutInjuryAccidentInput, ImageUncheckedUpdateWithoutInjuryAccidentInput>
  }

  export type ImageUpdateManyWithWhereWithoutInjuryAccidentInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutAccident_picturesInput>
  }

  export type AccidentUpsertWithWhereUniqueWithoutInjuryAccidentInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutInjuryAccidentInput, AccidentUncheckedUpdateWithoutInjuryAccidentInput>
    create: XOR<AccidentCreateWithoutInjuryAccidentInput, AccidentUncheckedCreateWithoutInjuryAccidentInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutInjuryAccidentInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutInjuryAccidentInput, AccidentUncheckedUpdateWithoutInjuryAccidentInput>
  }

  export type AccidentUpdateManyWithWhereWithoutInjuryAccidentInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentInput>
  }

  export type ImageCreateWithoutPropertyAccidentInput = {
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccident: InjuryAccidentCreateNestedOneWithoutAccident_picturesInput
    hitPerson: HitPersonCreateNestedOneWithoutAccident_picturesInput
  }

  export type ImageUncheckedCreateWithoutPropertyAccidentInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    hitPersonId: number
  }

  export type ImageCreateOrConnectWithoutPropertyAccidentInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutPropertyAccidentInput, ImageUncheckedCreateWithoutPropertyAccidentInput>
  }

  export type ImageCreateManyPropertyAccidentInputEnvelope = {
    data: Enumerable<ImageCreateManyPropertyAccidentInput>
    skipDuplicates?: boolean
  }

  export type AccidentCreateWithoutPropertyAccidentInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    injuryReport?: InjuryReportCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutPropertyAccidentInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutPropertyAccidentInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutPropertyAccidentInput, AccidentUncheckedCreateWithoutPropertyAccidentInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutPropertyAccidentInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutPropertyAccidentInput, ImageUncheckedUpdateWithoutPropertyAccidentInput>
    create: XOR<ImageCreateWithoutPropertyAccidentInput, ImageUncheckedCreateWithoutPropertyAccidentInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutPropertyAccidentInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutPropertyAccidentInput, ImageUncheckedUpdateWithoutPropertyAccidentInput>
  }

  export type ImageUpdateManyWithWhereWithoutPropertyAccidentInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutAccident_picturesInput>
  }

  export type AccidentUpsertWithWhereUniqueWithoutPropertyAccidentInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutPropertyAccidentInput, AccidentUncheckedUpdateWithoutPropertyAccidentInput>
    create: XOR<AccidentCreateWithoutPropertyAccidentInput, AccidentUncheckedCreateWithoutPropertyAccidentInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutPropertyAccidentInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutPropertyAccidentInput, AccidentUncheckedUpdateWithoutPropertyAccidentInput>
  }

  export type AccidentUpdateManyWithWhereWithoutPropertyAccidentInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentInput>
  }

  export type AccidentCreateWithoutInjuryReportInput = {
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
    user: UserCreateNestedOneWithoutAccidentsInput
    hitPerson?: HitPersonCreateNestedManyWithoutAccidentInput
    thirdParty?: ThirdPartyCreateNestedManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentCreateNestedManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentCreateNestedManyWithoutAccidentInput
  }

  export type AccidentUncheckedCreateWithoutInjuryReportInput = {
    id?: number
    userId: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentCreateOrConnectWithoutInjuryReportInput = {
    where: AccidentWhereUniqueInput
    create: XOR<AccidentCreateWithoutInjuryReportInput, AccidentUncheckedCreateWithoutInjuryReportInput>
  }

  export type AccidentUpsertWithWhereUniqueWithoutInjuryReportInput = {
    where: AccidentWhereUniqueInput
    update: XOR<AccidentUpdateWithoutInjuryReportInput, AccidentUncheckedUpdateWithoutInjuryReportInput>
    create: XOR<AccidentCreateWithoutInjuryReportInput, AccidentUncheckedCreateWithoutInjuryReportInput>
  }

  export type AccidentUpdateWithWhereUniqueWithoutInjuryReportInput = {
    where: AccidentWhereUniqueInput
    data: XOR<AccidentUpdateWithoutInjuryReportInput, AccidentUncheckedUpdateWithoutInjuryReportInput>
  }

  export type AccidentUpdateManyWithWhereWithoutInjuryReportInput = {
    where: AccidentScalarWhereInput
    data: XOR<AccidentUpdateManyMutationInput, AccidentUncheckedUpdateManyWithoutAccidentInput>
  }

  export type InjuryAccidentCreateWithoutAccident_picturesInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident?: AccidentCreateNestedManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedCreateWithoutAccident_picturesInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
  }

  export type InjuryAccidentCreateOrConnectWithoutAccident_picturesInput = {
    where: InjuryAccidentWhereUniqueInput
    create: XOR<InjuryAccidentCreateWithoutAccident_picturesInput, InjuryAccidentUncheckedCreateWithoutAccident_picturesInput>
  }

  export type HitPersonCreateWithoutAccident_picturesInput = {
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
    accident?: AccidentCreateNestedManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedCreateWithoutAccident_picturesInput = {
    id?: number
    accidentId: number
    medical_attention: boolean
    vehicle_or_pedestrian: string
    previous_damage: string
    contact_infomation: JsonNullValueInput | InputJsonValue
    injury: string
  }

  export type HitPersonCreateOrConnectWithoutAccident_picturesInput = {
    where: HitPersonWhereUniqueInput
    create: XOR<HitPersonCreateWithoutAccident_picturesInput, HitPersonUncheckedCreateWithoutAccident_picturesInput>
  }

  export type PropertyAccidentCreateWithoutAccident_picturesInput = {
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
    accident?: AccidentCreateNestedManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedCreateWithoutAccident_picturesInput = {
    id?: number
    self_injured: boolean
    vehicle_number: string
    amazon_logo: boolean
    exact_address: string
    action_before_accident: JsonNullValueInput | InputJsonValue
    police_report: JsonNullValueInput | InputJsonValue
    weather: string
    wet_ground: boolean
    slippery_ground: boolean
    extra_info: string
    rushed_prior: boolean
    accidentId: number
  }

  export type PropertyAccidentCreateOrConnectWithoutAccident_picturesInput = {
    where: PropertyAccidentWhereUniqueInput
    create: XOR<PropertyAccidentCreateWithoutAccident_picturesInput, PropertyAccidentUncheckedCreateWithoutAccident_picturesInput>
  }

  export type InjuryAccidentUpsertWithoutAccident_picturesInput = {
    update: XOR<InjuryAccidentUpdateWithoutAccident_picturesInput, InjuryAccidentUncheckedUpdateWithoutAccident_picturesInput>
    create: XOR<InjuryAccidentCreateWithoutAccident_picturesInput, InjuryAccidentUncheckedCreateWithoutAccident_picturesInput>
  }

  export type InjuryAccidentUpdateWithoutAccident_picturesInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident?: AccidentUpdateManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedUpdateWithoutAccident_picturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type HitPersonUpsertWithoutAccident_picturesInput = {
    update: XOR<HitPersonUpdateWithoutAccident_picturesInput, HitPersonUncheckedUpdateWithoutAccident_picturesInput>
    create: XOR<HitPersonCreateWithoutAccident_picturesInput, HitPersonUncheckedCreateWithoutAccident_picturesInput>
  }

  export type HitPersonUpdateWithoutAccident_picturesInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
    accident?: AccidentUpdateManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedUpdateWithoutAccident_picturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyAccidentUpsertWithoutAccident_picturesInput = {
    update: XOR<PropertyAccidentUpdateWithoutAccident_picturesInput, PropertyAccidentUncheckedUpdateWithoutAccident_picturesInput>
    create: XOR<PropertyAccidentCreateWithoutAccident_picturesInput, PropertyAccidentUncheckedCreateWithoutAccident_picturesInput>
  }

  export type PropertyAccidentUpdateWithoutAccident_picturesInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident?: AccidentUpdateManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedUpdateWithoutAccident_picturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentCreateManyUserInput = {
    id?: number
    using_safety?: boolean | null
    safety_failed?: boolean | null
    number_package_carried?: number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: boolean | null
  }

  export type AccidentUpdateWithoutUserInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AccidentUncheckedUpdateManyWithoutAccidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type HitPersonUpdateWithoutAccidentInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
    accident_pictures?: ImageUpdateManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
    accident_pictures?: ImageUncheckedUpdateManyWithoutHitPersonInput
  }

  export type HitPersonUncheckedUpdateManyWithoutHitPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    medical_attention?: BoolFieldUpdateOperationsInput | boolean
    vehicle_or_pedestrian?: StringFieldUpdateOperationsInput | string
    previous_damage?: StringFieldUpdateOperationsInput | string
    contact_infomation?: JsonNullValueInput | InputJsonValue
    injury?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyUpdateWithoutAccidentInput = {
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type ThirdPartyUncheckedUpdateManyWithoutThirdPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accidentId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
  }

  export type InjuryAccidentUpdateWithoutAccidentInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUpdateManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUncheckedUpdateManyWithoutInjuryAccidentInput
  }

  export type InjuryAccidentUncheckedUpdateManyWithoutInjuryAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type PropertyAccidentUpdateWithoutAccidentInput = {
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUpdateManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
    accident_pictures?: ImageUncheckedUpdateManyWithoutPropertyAccidentInput
  }

  export type PropertyAccidentUncheckedUpdateManyWithoutPropertyAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    vehicle_number?: StringFieldUpdateOperationsInput | string
    amazon_logo?: BoolFieldUpdateOperationsInput | boolean
    exact_address?: StringFieldUpdateOperationsInput | string
    action_before_accident?: JsonNullValueInput | InputJsonValue
    police_report?: JsonNullValueInput | InputJsonValue
    weather?: StringFieldUpdateOperationsInput | string
    wet_ground?: BoolFieldUpdateOperationsInput | boolean
    slippery_ground?: BoolFieldUpdateOperationsInput | boolean
    extra_info?: StringFieldUpdateOperationsInput | string
    rushed_prior?: BoolFieldUpdateOperationsInput | boolean
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportUpdateWithoutAccidentInput = {
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportUncheckedUpdateWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type InjuryReportUncheckedUpdateManyWithoutInjuryReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    immediate_attention?: BoolFieldUpdateOperationsInput | boolean
    late?: JsonNullValueInput | InputJsonValue
    self_injured?: BoolFieldUpdateOperationsInput | boolean
    injury_type?: JsonNullValueInput | InputJsonValue
    other_injured?: BoolFieldUpdateOperationsInput | boolean
    before_injury?: StringFieldUpdateOperationsInput | string
    packages?: JsonNullValueInput | InputJsonValue
    safety_equipment?: JsonNullValueInput | InputJsonValue
    unsafe_conditions?: JsonNullValueInput | InputJsonValue
    pain_level?: IntFieldUpdateOperationsInput | number
    addtional_information?: StringFieldUpdateOperationsInput | string
    accidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateManyHitPersonInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    propertyAccidentId: number
  }

  export type AccidentUpdateWithoutHitPersonInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutHitPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AccidentUncheckedUpdateManyWithoutAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageUpdateWithoutHitPersonInput = {
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccident?: InjuryAccidentUpdateOneRequiredWithoutAccident_picturesInput
    propertyAccident?: PropertyAccidentUpdateOneRequiredWithoutAccident_picturesInput
  }

  export type ImageUncheckedUpdateWithoutHitPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccidentId?: IntFieldUpdateOperationsInput | number
    propertyAccidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyWithoutAccident_picturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccidentId?: IntFieldUpdateOperationsInput | number
    propertyAccidentId?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentUpdateWithoutThirdPartyInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutThirdPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageCreateManyInjuryAccidentInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    hitPersonId: number
    propertyAccidentId: number
  }

  export type ImageUpdateWithoutInjuryAccidentInput = {
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    hitPerson?: HitPersonUpdateOneRequiredWithoutAccident_picturesInput
    propertyAccident?: PropertyAccidentUpdateOneRequiredWithoutAccident_picturesInput
  }

  export type ImageUncheckedUpdateWithoutInjuryAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    hitPersonId?: IntFieldUpdateOperationsInput | number
    propertyAccidentId?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentUpdateWithoutInjuryAccidentInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutInjuryAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageCreateManyPropertyAccidentInput = {
    id?: number
    fieldname: string
    path: string
    mimetype: string
    size: number
    originalname: string
    encoding: string
    destination: string
    filename: string
    injuryAccidentId: number
    hitPersonId: number
  }

  export type ImageUpdateWithoutPropertyAccidentInput = {
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccident?: InjuryAccidentUpdateOneRequiredWithoutAccident_picturesInput
    hitPerson?: HitPersonUpdateOneRequiredWithoutAccident_picturesInput
  }

  export type ImageUncheckedUpdateWithoutPropertyAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fieldname?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    originalname?: StringFieldUpdateOperationsInput | string
    encoding?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    injuryAccidentId?: IntFieldUpdateOperationsInput | number
    hitPersonId?: IntFieldUpdateOperationsInput | number
  }

  export type AccidentUpdateWithoutPropertyAccidentInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    injuryReport?: InjuryReportUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutPropertyAccidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AccidentUpdateWithoutInjuryReportInput = {
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneRequiredWithoutAccidentsInput
    hitPerson?: HitPersonUpdateManyWithoutAccidentInput
    thirdParty?: ThirdPartyUpdateManyWithoutAccidentInput
    injuryAccident?: InjuryAccidentUpdateManyWithoutAccidentInput
    propertyAccident?: PropertyAccidentUpdateManyWithoutAccidentInput
  }

  export type AccidentUncheckedUpdateWithoutInjuryReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    using_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
    safety_failed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    number_package_carried?: NullableIntFieldUpdateOperationsInput | number | null
    safety_equipment_used?: NullableJsonNullValueInput | InputJsonValue
    failed_safety?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}