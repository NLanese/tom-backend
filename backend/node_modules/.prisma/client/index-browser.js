
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.SuperAdminScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role',
  firstname: 'firstname',
  lastname: 'lastname',
  username: 'username',
  email: 'email',
  password: 'password'
});

exports.Prisma.AdminScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role',
  firstname: 'firstname',
  lastname: 'lastname',
  username: 'username',
  email: 'email',
  password: 'password'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role',
  firstname: 'firstname',
  lastname: 'lastname',
  username: 'username',
  email: 'email',
  password: 'password',
  fico: 'fico',
  netradyne: 'netradyne',
  da: 'da',
  seatbelt: 'seatbelt',
  speeding: 'speeding',
  defects: 'defects',
  cdf: 'cdf',
  dar: 'dar',
  dcr: 'dcr',
  pod: 'pod',
  cc: 'cc',
  sc: 'sc',
  has_many_accidents: 'has_many_accidents',
  belongs_to_team: 'belongs_to_team',
  attendance: 'attendance',
  productivity: 'productivity',
  adminId: 'adminId'
});

exports.Prisma.AccidentScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  using_safety: 'using_safety',
  safety_failed: 'safety_failed',
  number_package_carried: 'number_package_carried',
  safety_equipment_used: 'safety_equipment_used',
  failed_safety: 'failed_safety'
});

exports.Prisma.HitPersonScalarFieldEnum = makeEnum({
  id: 'id',
  accidentId: 'accidentId',
  medical_attention: 'medical_attention',
  vehicle_or_pedestrian: 'vehicle_or_pedestrian',
  previous_damage: 'previous_damage',
  contact_infomation: 'contact_infomation',
  injury: 'injury'
});

exports.Prisma.ThirdPartyScalarFieldEnum = makeEnum({
  id: 'id',
  accidentId: 'accidentId',
  location: 'location'
});

exports.Prisma.InjuryAccidentScalarFieldEnum = makeEnum({
  id: 'id',
  self_injured: 'self_injured',
  vehicle_number: 'vehicle_number',
  amazon_logo: 'amazon_logo',
  exact_address: 'exact_address',
  action_before_accident: 'action_before_accident',
  police_report: 'police_report',
  weather: 'weather',
  wet_ground: 'wet_ground',
  slippery_ground: 'slippery_ground',
  extra_info: 'extra_info',
  rushed_prior: 'rushed_prior',
  accidentId: 'accidentId'
});

exports.Prisma.PropertyAccidentScalarFieldEnum = makeEnum({
  id: 'id',
  self_injured: 'self_injured',
  vehicle_number: 'vehicle_number',
  amazon_logo: 'amazon_logo',
  exact_address: 'exact_address',
  action_before_accident: 'action_before_accident',
  police_report: 'police_report',
  weather: 'weather',
  wet_ground: 'wet_ground',
  slippery_ground: 'slippery_ground',
  extra_info: 'extra_info',
  rushed_prior: 'rushed_prior',
  accidentId: 'accidentId'
});

exports.Prisma.InjuryReportScalarFieldEnum = makeEnum({
  id: 'id',
  immediate_attention: 'immediate_attention',
  late: 'late',
  self_injured: 'self_injured',
  injury_type: 'injury_type',
  other_injured: 'other_injured',
  before_injury: 'before_injury',
  packages: 'packages',
  safety_equipment: 'safety_equipment',
  unsafe_conditions: 'unsafe_conditions',
  pain_level: 'pain_level',
  addtional_information: 'addtional_information',
  accidentId: 'accidentId'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  fieldname: 'fieldname',
  path: 'path',
  mimetype: 'mimetype',
  size: 'size',
  originalname: 'originalname',
  encoding: 'encoding',
  destination: 'destination',
  filename: 'filename',
  injuryAccidentId: 'injuryAccidentId',
  hitPersonId: 'hitPersonId',
  propertyAccidentId: 'propertyAccidentId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
});

exports.Prisma.ModelName = makeEnum({
  SuperAdmin: 'SuperAdmin',
  Admin: 'Admin',
  User: 'User',
  Accident: 'Accident',
  HitPerson: 'HitPerson',
  ThirdParty: 'ThirdParty',
  InjuryAccident: 'InjuryAccident',
  PropertyAccident: 'PropertyAccident',
  InjuryReport: 'InjuryReport',
  Image: 'Image'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
