// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model SuperAdmin {
//   id                  Int         @id @default(autoincrement())
//   role                Role        @default(SUPERADMIN)
//   firstname           String
//   lastname            String
//   username            String      @unique
//   email               String      @unique
//   password            String
// }

model Admin {
  id                  Int         @id @default(autoincrement())
  role                Role        @default(ADMIN)
  firstname           String
  lastname            String
  username            String      @unique
  email               String      @unique
  password            String
  users               User[]
}

model User {
  id                  Int         @id @default(autoincrement())
  role                Role        @default(USER)
  firstname           String
  lastname            String
  username            String      @unique
  email               String      @unique
  password            String
  fico                Int?
  netradyne           Int?
  da                  Int?
  seatbelt            Boolean?
  speeding            Boolean?
  defects             Int?
  cdf                 Int?
  dar                 Int?
  dcr                 Int?
  pod                 Int?
  cc                  Int?
  sc                  Int?
  has_many_accidents  Int?
  belongs_to_team     Boolean?
  attendance          Json?
  productivity        Json?

  adminId             Int?
  admin               Admin?         @relation(fields: [adminId], references: [id])
  accidents           Accident[]
  // thirdParty          ThirdParty[]
}

model Accident {
  id                      Int         @id @default(autoincrement())
  userId                  Int
  user                    User        @relation(fields: [userId], references: [id])
  using_safety            Boolean?
  safety_failed           Boolean?
  number_package_carried  Int?
  safety_equipment_used   Json?
  failed_safety           Boolean?
  hitPerson               HitPerson[]
  thirdParty              ThirdParty[]
  injuryAccident          InjuryAccident[]
  propertyAccident        PropertyAccident[]
  injuryReport            InjuryReport[]
}

model HitPerson {
  id                    Int         @id @default(autoincrement())
  accidentId            Int
  accident              Accident[]  @relation(fields: [accidentId], references: [id])
  medical_attention     Boolean
  vehicle_or_pedestrian String
  previous_damage       String
  contact_infomation    Json
  injury                String

  accident_pictures     Image[]
}

model ThirdParty {
  id                  Int         @id @default(autoincrement())
  // userId                  Int
  // user                    User        @relation(fields: [userId], references: [id])
  accidentId          Int
  accident            Accident[]  @relation(fields: [accidentId], references: [id])
  location            String
}

model InjuryAccident {
  id                      Int         @id @default(autoincrement())
  self_injured            Boolean
  vehicle_number          String
  amazon_logo             Boolean
  exact_address           String
  action_before_accident  Json
  police_report           Json
  weather                 String
  wet_ground              Boolean
  slippery_ground         Boolean
  extra_info              String
  rushed_prior            Boolean

  accident_pictures       Image[]

  accidentId              Int
  accident                Accident[] @relation(fields: [accidentId], references: [id])
}

model PropertyAccident {
  id                      Int       @id @default(autoincrement())
  self_injured            Boolean
  vehicle_number          String
  amazon_logo             Boolean
  exact_address           String
  action_before_accident  Json
  police_report           Json
  weather                 String
  wet_ground              Boolean
  slippery_ground         Boolean
  extra_info              String
  rushed_prior            Boolean

  accident_pictures       Image[]

  accidentId              Int
  accident                Accident[] @relation(fields: [accidentId], references: [id])
}

model InjuryReport {
  id                      Int       @id @default(autoincrement())
  immediate_attention     Boolean
  late                    Json
  self_injured            Boolean
  injury_type             Json
  other_injured           Boolean
  before_injury           String
  packages                Json
  safety_equipment        Json
  unsafe_conditions       Json
  pain_level              Int
  addtional_information   String

  accidentId              Int
  accident                Accident[] @relation(fields: [accidentId], references: [id])
}

model Image {
  id                      Int       @id @default(autoincrement())
  fieldname               String
  path                    String
  mimetype                String
  size                    Int
  originalname            String
  encoding                String
  destination             String
  filename                String

  injuryAccidentId        Int
  injuryAccident          InjuryAccident @relation(fields: [injuryAccidentId], references: [id])

  hitPersonId             Int
  hitPerson               HitPerson     @relation(fields: [hitPersonId], references: [id])

  propertyAccidentId        Int
  propertyAccident        PropertyAccident @relation(fields: [propertyAccidentId], references: [id])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
