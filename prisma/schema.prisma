generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// FOR INTERNAL KING WILLY USE
model SuperUser {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(SUPERADMIN)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  password    String
  phoneNumber String
  profilePick Json?
}

model Owner {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(OWNER)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String
  password    String
  profilePick Json?

  // ACCOUNT INFORMATION
  locked  Boolean @default(false) // Used to lock the Drivers Account if needed
  deleted Boolean @default(false) // Keeps track if the Manager account has been deleted

  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // RESET PASSWORD
  resetPasswordToken           String?
  resetPasswordTokenExpiration Int?
  signUpToken                  String? @unique // Used for Driver/Manager signing up on the app

  // RELATIONSHIPS
  drivers          Driver[]
  managers         Manager[]
  messages         Messages[]
  notifiedMessages NotifiedMessages[]
  dsp              Dsp?
  weeklySchedule   WeeklySchedule[]
  chatrooms        Chatroom[]
}

model Manager {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(MANAGER)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String
  password    String
  profilePick Json?

  // ACCOUNT INFORMATION
  muted   Boolean @default(false) // Used to disable char features for Driver
  locked  Boolean @default(false) // Used to lock the Managers Account if needed
  deleted Boolean @default(false) // Keeps track if the Managers Account has been deleted

  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // RESET PASSWORD
  resetPasswordToken           String?
  resetPasswordTokenExpiration Int?

  // RELATIONSHIPS
  ownerId          String
  owner            Owner              @relation(fields: [ownerId], references: [id])
  drivers          Driver[]
  messages         Messages[]
  notifiedMessages NotifiedMessages[]
  dspId            String?
  dsp              Dsp?               @relation(fields: [dspId], references: [id])
  weeklySchedule   WeeklySchedule[]
  chatrooms        Chatroom[]
}

model Driver {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(DRIVER)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String
  password    String
  profilePick Json?

  // ACCOUNT INFORMATION
  transporterId String? @unique
  muted         Boolean @default(false) // Used to disable char features for Driver
  locked        Boolean @default(false) // Used to lock the Drivers Account if needed
  deleted       Boolean @default(false) // Keeps track if the Drivers account has been deleted
  attendence    String?

  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // RESET PASSWORD
  resetPasswordToken           String?
  resetPasswordTokenExpiration Int?

  // RELATIONSHIPS
  ownerId          String
  owner            Owner              @relation(fields: [ownerId], references: [id])
  managers         Manager[]
  accidents        Accident[]
  messages         Messages[]
  notifiedMessages NotifiedMessages[]
  vehicle          Vehicle?
  dspId            String?
  dsp              Dsp?               @relation(fields: [dspId], references: [id])
  weeklyReport     WeeklyReport[]
  weeklySchedule   WeeklySchedule[]
  chatrooms        Chatroom[]
  shiftPlanners    ShiftPlanner[]
}

model Dsp {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  shortcode String   @unique
  timeZone  String

  // DSP SETTINGS
  ficoLimits                   Json
  seatbeltLimits               Json
  speedingLimits               Json
  distractionLimits            Json
  followLimits                 Json
  signalLimits                 Json
  deliveryCompletionRateLimits Json
  scanComplianceLimits         Json
  callComplianceLimits         Json
  deliveryNotRecievedLimits    Json
  photoOnDeliveryLimits        Json
  topCardLimits                Int
  smallCardLimits              Int
  feedbackNotifications        Json
  autoSend                     Json

  // DSP INFORMATION
  paid            Boolean @default(false) // Keeps track if the Dsp has paid 
  accountStanding String  @default("Free") // Keeps track of the Dsp Account Status

  // RELATIONSHIPS
  managers Manager[]
  drivers  Driver[]
  ownerId  String    @unique
  owner    Owner     @relation(fields: [ownerId], references: [id])
  shiftPlannerDates ShiftPlannerDates?
}

// model VTO {
//  Related to driver
//  Date
//  Want VTO  
//}

model ShiftPlannerDates {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  dates     String[]

  dspId            String
  dsp              Dsp               @relation(fields: [dspId], references: [id])
}

model ShiftPlanner {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())

  // SHIFT PLANNER REQUIRED DATA
  sundayDate     String? // 11/1/21
  sundayHours    String? // Hours working
  mondayDate     String?
  mondayHours    String?
  tuesdayDate    String?
  tuesdayHours   String?
  wednesdayDate  String?
  wednesdayHours String?
  thursdayDate   String?
  thursdayHours  String?
  fridayDate     String?
  fridayHours    String?
  saturdayDate   String?
  saturdayHours  String?
  weekStartDate  String? // Sunday
  weekEndDate    String? // Saturday

  // sweeper schema
  // sweeperHelping
  // sweepersHours
  // VTO Volentary Time Off
  // Metrics Attendence/VTO Days

  // attendence

  // Monthly Report Generator


  // SHIFT PLANNER UNREQUIRED DATA
  phoneId   String?
  deviceId  String?
  vehicleId String?
  cxNumber  String? // If 'null' Driver is a sweeper
  message   String?

  // RELATIONSHIPS
  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])
}



model WeeklyReport {
  id                  String   @id @unique @default(uuid())
  createdAt           DateTime @default(now())
  date                String // 11-1-21 11-8-21
  hadAccident         Boolean  @default(false)
  feedbackMessage     String?
  feedbackStatus      String?
  feedbackMessageSent Boolean  @default(false)
  acknowledged        Boolean  @default(false)
  acknowledgedAt      String?

  // DATA FROM SCORECARD TOOL
  rank                     Int
  tier                     String
  delivered                Int
  keyFocusArea             String
  fico                     String
  seatbeltOffRate          String
  speedingEventRate        String
  distractionsRate         String
  followingDistanceRate    String
  signalViolationsRate     String
  deliveryCompletionRate   String
  deliveredAndRecieved     String
  photoOnDelivery          String
  callCompliance           String
  scanCompliance           String
  attendedDeliveryAccuracy Int
  dnr                      Int
  podOpps                  Int
  ccOpps                   Int

  // ADDITIONAL INFORMATION
  netradyne                Json?
  deliveryAssociate        Json?
  defects                  Json?
  customerDeliveryFeedback Json?
  hasManyAccidents         Json?
  belongsToTeam            Json?
  attendance               Json?
  productivity             Json?

  // RELATIONSHIPS
  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])
}

model WeeklySchedule {
  id            String   @id @unique @default(uuid())
  createdAt     DateTime @default(now())
  weekStartDate String
  weekEndDate   String
  monday        Json
  tuesday       Json
  wednesday     Json
  thursday      Json
  friday        Json
  saturday      Json
  sunday        Json

  // RELATIONSHIPS
  ownerId   String
  owner     Owner   @relation(fields: [ownerId], references: [id])
  managerId String
  manager   Manager @relation(fields: [managerId], references: [id])
  driverId  String
  driver    Driver  @relation(fields: [driverId], references: [id])
}

model Chatroom {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())

  // CHATROOM INFORMATION
  chatroomName  String
  guests        Json[]
  chatroomOwner Json

  // KEEPS TRACK OF WHO GET AUTO JOINED TO THE ROOM ON SIGN UP
  driverJoinOnSignUp  Boolean @default(false)
  managerJoinOnSignUp Boolean @default(true) // Keeps track on wether manager should be auto added to the chatroom apon signup


  // RELATIONSHIPS
  ownerId  String?
  owner    Owner?     @relation(fields: [ownerId], references: [id])
  drivers  Driver[]
  managers Manager[]
  messages Messages[]
}

model Messages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // MESSAGE INFORMATION
  content    String
  from       Json
  visable    Boolean @default(true)
  reported   Boolean @default(false)
  reportedBy Json?

  // RELATIONSHIPS
  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  ownerId    String?
  owner      Owner?   @relation(fields: [ownerId], references: [id])
  managerId  String?
  manager    Manager? @relation(fields: [managerId], references: [id])
  driverId   String?
  driver     Driver?  @relation(fields: [driverId], references: [id])
}

model NotifiedMessages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  content   String
  from      String
  type      String
  driverId  String?
  adminId   String?
  ownerId   String?
  owner     Owner?   @relation(fields: [ownerId], references: [id])
  driver    Driver?  @relation(fields: [driverId], references: [id])
  manager   Manager? @relation(fields: [adminId], references: [id])
}

model Vehicle {
  id            Int     @id @default(autoincrement())
  driverId      String  @unique
  driver        Driver  @relation(fields: [driverId], references: [id])
  vehicleNumber String?
  amazonLogo    String?
}

model Accident {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String
  date      String
  time      String
  location  String

  // ACCIDENT DATA
  amazon_logo               Boolean?
  vehicleId                 String?
  number_packages_carried   Int?
  police_report_information Json?
  general_pictures          Json?
  weather                   String?
  rushed_prior              Boolean?
  distracted                Boolean?
  extra_info                String?
  actions_before_accidents  Json?
  unsafe_conditions         Json?

  deleted Boolean @default(false)
  filled  Boolean @default(false)

  // RELATIONSHIPS
  driverId          String
  driver            Driver              @relation(fields: [driverId], references: [id])
  collisionAccidents CollisionAccident[]
  propertyAccidents  PropertyAccident[]
  injuryAccidents    InjuryAccident[]
}

model PropertyAccident {
  id                  String @id @unique @default(uuid())
  contact_info        Json
  damage_report       Json
  defective_equip     String[]
  safety_equip        String[]
  specific_pictures   Json
  extra_info          String?
  types_of_damage     Json

  // RELATIONSHIPS
  accidentId        String
  accident          Accident  @relation(fields: [accidentId], references: [id])
}

model CollisionAccident {
  id                String @id @unique @default(uuid())
  specific_pictures Json
  contact_info      Json
  extra_info        String?
  collision_report  Json

  // RELATIONSHIPS
  accidentId        String
  accident          Accident  @relation(fields: [accidentId], references: [id])
  injuryAccidents    InjuryAccident[]
}

model InjuryAccident {
  id                  String @id @unique @default(uuid())
  contact_info        Json
  extra_info          String?
  injured_areas       Json
  injury_report       Json
  pain_level          String
  specific_pictures   Json

  // RELATIONSHIPS
  accidentId String
  accident   Accident @relation(fields: [accidentId], references: [id])
  collisionAccidentId String?
  collisionAccident   CollisionAccident? @relation(fields: [collisionAccidentId], references: [id])
}

enum Role {
  DRIVER
  MANAGER
  OWNER
  SUPERADMIN
}
