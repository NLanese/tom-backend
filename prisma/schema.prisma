generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////
///                               ///
///         Super User            ///
///                               ///
/////////////////////////////////////
model SuperUser {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(SUPERADMIN)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  password    String
  phoneNumber String
  profilePick Json?
}

/////////////////////////////////////
///                               ///
///            Owner              ///
///                               ///
/////////////////////////////////////

model Owner {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(OWNER)
  token       String?  
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String
  password    String
  profilePick Json?
  locked      Boolean @default(false) // Used to lock the Managers Account if needed

  deleted Boolean @default(false) // Keeps track if the Owner account has been deleted

  notified Boolean @default(false)
  resetPasswordToken           String?
  resetPasswordTokenExpiration Int?
  signUpToken                  String? @unique // Used for Driver/Manager signing up on the app

  subscriptionToken            String?
  subscriptionStartDate        String?
  subscriptionEndDate          String?
  stripeCustomerId             String?
  autoPayEnabled               Boolean @default(false)

  drivers          Driver[]
  managers         Manager[]
  mutedListIds    String[]
  messages         Messages[]
  announcementMessages AnnouncementMessages[]
  dsp              Dsp?
  chatrooms        Chatroom[]
}

/////////////////////////////////////
///                               ///
///            Manager            ///
///                               ///
/////////////////////////////////////

model Manager {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(MANAGER)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String
  password    String
  profilePick Json?
  muted       Boolean @default(false) // Used to disable char features for Driver
  locked      Boolean @default(false) // Used to lock the Managers Account if needed
  deleted     Boolean @default(false) // Keeps track if the Managers Account has been deleted

  notified    Boolean @default(false)

  resetPasswordToken           String?
  resetPasswordTokenExpiration Int?

  ownerId          String
  owner            Owner              @relation(fields: [ownerId], references: [id])
  drivers          Driver[]
  mutedListIds     String[]
  messages         Messages[]
  announcementMessages AnnouncementMessages[]
  dspId            String?
  dsp              Dsp?               @relation(fields: [dspId], references: [id])
  chatrooms        Chatroom[]
}

/////////////////////////////////////
///                               ///
///           Driver              ///
///                               ///
/////////////////////////////////////

model Driver {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(DRIVER)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  phoneNumber String?
  password    String?
  profilePick Json?
  shifts      Json[]

  transporterId   String? 
  globallyMuted   Boolean @default(false) // Used to disable char features for Driver
  mutedIds        String[]
  locked          Boolean @default(false) // Used to lock the Drivers Account if needed
  deleted         Boolean @default(false) // Keeps track if the Drivers account has been deleted
  attendence      String?

  notified        Boolean @default(false)

  resetPasswordToken           String?  @unique
  resetPasswordTokenExpiration String?   

  ownerId          String
  owner            Owner              @relation(fields: [ownerId], references: [id])
  managers         Manager[]
  accidents        Accident[]
  messages         Messages[]
  notifiedMessages NotifiedMessages[]
  dspId            String?
  dspTransporter   String @unique
  dsp              Dsp?               @relation(fields: [dspId], references: [id])
  weeklyReport     WeeklyReport[]
  chatrooms        Chatroom[]
  devices          Device[]
}

/////////////////////////////////////
///                               ///
///             DSP               ///
///                               ///
/////////////////////////////////////

model Dsp {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  shortcode String   @unique
  timeZone  String


    ficoLimits                   Json
    seatbeltLimits               Json
    speedingLimits               Json
    distractionLimits            Json
    followLimits                 Json
    signalLimits                 Json
    deliveryCompletionRateLimits Json
    deliveryNotRecievedLimits    Json
    photoOnDeliveryLimits        Json
    topCardLimits                Int
    smallCardLimits              Int

    feedbackNotifications        Json
    autoSend                     Json

    allDevices                   Json[]

  paid                          Boolean @default(false) // Keeps track if the Dsp has paid 
  accountStanding               String  @default("Free") // Keeps track of the Dsp Account Status

  subscriptionToken            String
  subscriptionStartDate        String
  subscriptionEndDate          String
  stripeCustomerId             String?

  autoPayEnabled               Boolean @default(false)

  managers              Manager[]
  drivers               Driver[]     
  shifts                Shift[]     
  ownerId               String    @unique
  owner                 Owner     @relation(fields: [ownerId], references: [id])
  weeklyReports         WeeklyReport[]
  notifiedMessages      NotifiedMessages[]
  devices               Device[]
  announcementMessages  AnnouncementMessages[]
  accidents             Accident[]
}

/////////////////////////////////////
///                               ///
///         Weekly Report         ///
///                               ///
/////////////////////////////////////

model WeeklyReport {
  id                  String   @id @unique @default(uuid())
  createdAt           DateTime @default(now())
  date                String 
  hadAccident         Boolean  @default(false)
  feedbackMessage     String?
  feedbackStatus      String?
  feedbackMessageSent Boolean  @default(false)
  acknowledged        Boolean  @default(false)
  acknowledgedAt      String?

  // DATA FROM SCORECARD TOOL
  rank                     Int?
  tier                     String?
  delivered                Int?
  keyFocusArea             String?
  fico                     String?
  seatbeltOffRate          String?
  speedingEventRate        String?
  distractionsRate         String?
  followingDistanceRate    String?
  signalViolationsRate     String?
  deliveryCompletionRate   String?
  deliveredAndRecieved     String?
  photoOnDelivery          String?
  customerDeliveryFeedback String?
  attendedDeliveryAccuracy Int?
  dnr                      Int?
  podOpps                  Int?
  ccOpps                   Int?

  // ADDITIONAL INFORMATION
  netradyne                Json?
  deliveryAssociate        Json?
  defects                  Json?
  hasManyAccidents         Json?
  belongsToTeam            Json?
  attendance               Json?
  productivity             Json?

  // RELATIONSHIPS
  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])
  dspId    String
  dsp      Dsp @relation(fields: [dspId], references: [id])
}

/////////////////////////////////////
///                               ///
///             Shift             ///
///                               ///
/////////////////////////////////////

model Shift {
  id              String  @id @unique @default(uuid())
  date            String
  dateDsp         String @unique
  allDriverShifts Json[]                               // {driver: <driverObj>, devices: {
                                                        //      device1: { <deviceObj>, device2: <deviceObj> ... deviceN: <deviceIbj> }
                                                        // }
  dspId           String
  dsp             Dsp     @relation(fields: [dspId], references: [id])
  shiftMessage    String
}

/////////////////////////////////////
///                               ///
///           Chatroom            ///
///                               ///
/////////////////////////////////////

model Chatroom {
  id                String        @id @unique @default(uuid())
  createdAt         DateTime      @default(now())

  chatroomName      String
  guests            Json[]
  mutedIds          String[] 
  chatroomOwner     Json
  announcementChat  Boolean @default(false)

  driverJoinOnSignUp  Boolean @default(false)
  managerJoinOnSignUp Boolean @default(true) 

  ownerId  String?
  owner    Owner?             @relation(fields: [ownerId], references: [id])
  drivers  Driver[]
  managers Manager[]
  messages Messages[]
  announcementMessages AnnouncementMessages[]

  notifications   Notifications[]
}

/////////////////////////////////////
///                               ///
///           Messages            ///
///                               ///
/////////////////////////////////////

model Messages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  content    String
  sentAt     String?
  from       Json
  visable    Boolean @default(true)
  reported   Boolean @default(false)
  reportedBy Json?

  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  ownerId    String?
  owner      Owner?   @relation(fields: [ownerId], references: [id])
  managerId  String?
  manager    Manager? @relation(fields: [managerId], references: [id])
  driverId   String?
  driver     Driver?  @relation(fields: [driverId], references: [id])
}

/////////////////////////////////////
///                               ///
///     Announcement Message      ///
///                               ///
/////////////////////////////////////
model AnnouncementMessages {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  sentAt      String

  content     String
  from        Json
  readBy      Json[]      // [   {driver: {driverObj}, readAt: {date: '01/27/1999', time: '05:35'}  }     ] 
  readyByIds  String[]    

  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  ownerId    String?
  owner      Owner?   @relation(fields: [ownerId], references: [id])
  dspId      String?
  dsp        Dsp?     @relation(fields: [dspId], references: [id])
  managerId  String?
  manager    Manager? @relation(fields: [managerId], references: [id])
}

/////////////////////////////////////
///                               ///
///       Notified Message        ///
///                               ///
/////////////////////////////////////
model NotifiedMessages {
  id        Int      @id @default(autoincrement())
  createdAt String
  sentAt    String
  date      String
  read      Boolean  @default(false)
  readAt    String   
  content   String
  from      String
  type      String
  driverId  String?
  driver    Driver?  @relation(fields: [driverId], references: [id])
  dspId     String?
  dsp       Dsp?    @relation(fields: [dspId], references: [id])
}

model Notifications {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  sentAt    String  
  date      String
  content   String
  
  chatId    String?
  chatroom  Chatroom?  @relation(fields: [chatId], references: [id])

}
/////////////////////////////////////
///                               ///
///           Accident            ///
///                               ///
/////////////////////////////////////

model Accident {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String
  date      String
  time      String
  location  String

  accident_report            Json?
  police_report              Json?
  before_accident_report     Json?
  selfDamage                 Json?
  weather_and_distractions   Json?

  deleted Boolean @default(false)
  filled  Boolean @default(false)

  driverId            String
  driver              Driver              @relation(fields: [driverId], references: [id])
  collisionAccidents  CollisionAccident[]
  propertyAccidents   PropertyAccident[]
  injuryAccidents     InjuryAccident[]
  selfInjuryAccidents SelfInjuryAccident[]
  dspId               String
  dsp                 Dsp                 @relation(fields: [dspId], references: [id])
}
    ///////////////////////
    // Property Accident //
    ///////////////////////
    model PropertyAccident {
      id                  String @id @unique @default(uuid())
      contact_info        Json
      damage_report       Json
      defective_equip     String[]
      safety_equip        String[]
      package_report      Json?
      specific_pictures   Json
      extra_info          String?
      types_of_damage     Json

      accidentId        String
      accident          Accident  @relation(fields: [accidentId], references: [id])
    }
    ////////////////////////
    // Collision Accident //
    ////////////////////////
    model CollisionAccident {
      id                String @id @unique @default(uuid())
      specific_pictures Json
      contact_info      Json
      extra_info        String?
      collision_report  Json

      accidentId        String
      accident          Accident  @relation(fields: [accidentId], references: [id])
      injuryAccidents    InjuryAccident[]
    }

    ///////////////////////
    //  Injury Accident  //
    ///////////////////////
    model InjuryAccident {
      id                  String @id @unique @default(uuid())
      contact_info        Json
      extra_info          String?
      injured_areas       Json
      injury_report       Json
      pain_level          String
      specific_pictures   Json

      accidentId String
      accident   Accident @relation(fields: [accidentId], references: [id])
      collisionAccidentId String?
      collisionAccident   CollisionAccident? @relation(fields: [collisionAccidentId], references: [id])
    }

    //////////////////////////
    // Self Injury Accident //
    //////////////////////////
    model SelfInjuryAccident {
      id                  String @id @unique @default(uuid())
      animal_report       Json?
      injuries            Json
      injury_report       Json
      extra_info          String?
      specific_pictures   Json

      accidentId String
      accident   Accident @relation(fields: [accidentId], references: [id])
    }

enum Role {
  DRIVER
  MANAGER
  OWNER
  SUPERADMIN
}

/////////////////////////////////////
///                               ///
///         DEVICE MODEL          ///
///                               ///
/////////////////////////////////////

model Device {
  id                  Int @id @unique @default(autoincrement())
  createdAt           DateTime @default(now())
  number              String?
  name                String?
  type                String?
  deviceIndex         Int?

  driverId            String?
  driver              Driver? @relation(fields: [driverId], references: [id])
  dspId               String
  dsp                 Dsp @relation(fields: [dspId], references: [id])
}

