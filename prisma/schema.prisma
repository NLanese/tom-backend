generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider             = "mysql"
  url      = env("DATABASE_URL")
}


/////////////////////////////////////
///                               ///
///         Super User            ///
///                               ///
/////////////////////////////////////
model SuperUser {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  role        Role     @default(SUPERADMIN)
  token       String?
  firstname   String
  lastname    String
  email       String   @unique
  password    String
  phoneNumber String
  profilePick Json?
}


/////////////////////////////////////
///                               ///
///             User              ///
///                               ///
/////////////////////////////////////
model User{
  // Basic Information //
  id              String   @id @unique @default(uuid())
  role            Role
  firstname       String
  lastname        String
  email           String @unique
  phoneNumber     String @unique
  password        String
  createdAt       DateTime @default(now())
  profilePick     Json?
  ///////////////////////

  // Chatrooms //
  ownerChatrooms  Chatroom[] @relation(name: "chatOwner")
  mutedId         String
  muted           User @relation(fields: [mutedId], references: [id], name: "muted")
  mutedBy         User[] @relation("muted")
  ////////////

  //  Configurations //
  token                         String?  
  locked                        Boolean @default(false) // Used to lock the Managers Account if needed
  deleted                       Boolean @default(false) // Keeps track if the Owner account has been deleted
  resetPasswordToken            String?
  resetPasswordTokenExpiration  Int?
  signUpToken                   String? @unique // Used for Driver/Manager signing up on the app
  notified                      Boolean @default(false)
  ////////////////////

  // Drivers Only //
  transporterId                 String @unique
  globallyMuted                 Boolean @default(false)
  ownerId                       String
  attendance                    String
  weeklyReports                 WeeklyReport[]
  shifts                        Shift[]
  driverShifts                  DriverShift[]
  accidents                     Accident[]
  owner                         User[] @relation("OwnerDrivers")
  announcementsRead             AnnouncementMessages @relation("announcementsRead")
  //////////////////

  // Managers and Owners //
  dspOwner                      Boolean @default(false)
  drivers                       User[] @relation(name: "OwnerDrivers")
  /////////////////////////

  // Payment //
  subscriptionToken             String?
  subscriptionStartDate         String?
  subscriptionEndDate           String?
  stripeCustomerId              String?
  autoPayEnabled                Boolean @default(false)
  /////////////

  // General Connections //
  dspId                         String?
  dsp                           Dsp?
  chatrooms                     Chatroom[]  @relation(name: "guests")
  announcements                 AnnouncementMessages[]
  /////////////////////////
}


/////////////////////////////////////
///                               ///
///             DSP               ///
///                               ///
/////////////////////////////////////
model Dsp {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String   @unique
  shortcode String   @unique
  timeZone  String


  ficoLimits                   Json
  seatbeltLimits               Json
  speedingLimits               Json
  distractionLimits            Json
  followLimits                 Json
  signalLimits                 Json
  deliveryCompletionRateLimits Json
  deliveryNotRecievedLimits    Json
  photoOnDeliveryLimits        Json
  topCardLimits                Int
  smallCardLimits              Int

  feedbackNotifications        Json
  autoSend                     Json

  paid                          Boolean @default(false) // Keeps track if the Dsp has paid 
  accountStanding               String  @default("Free") // Keeps track of the Dsp Account Status

  subscriptionToken            String
  subscriptionStartDate        String
  subscriptionEndDate          String
  stripeCustomerId             String?

  autoPayEnabled               Boolean @default(false)
   
  shifts                      Shift[]     
  ownerId                     String    @unique
  owner                       User     @relation(fields: [ownerId], references: [id])
  weeklyReports               WeeklyReport[]
  notifiedMessages            NotifiedMessages[]
  devices                     Device[]
  announcementMessages        AnnouncementMessages[]
  accidents                   Accident[]
}

/////////////////////////////////////
///                               ///
///         Weekly Report         ///
///                               ///
/////////////////////////////////////
model WeeklyReport {
  id                  String   @id @unique @default(uuid())
  createdAt           DateTime @default(now())
  date                String 
  hadAccident         Boolean  @default(false)
  feedbackMessage     String?
  feedbackStatus      String?
  feedbackMessageSent Boolean  @default(false)
  acknowledged        Boolean  @default(false)
  acknowledgedAt      String?

  // DATA FROM SCORECARD TOOL
  rank                     Int?
  tier                     String?
  delivered                Int?
  keyFocusArea             String?
  fico                     String?
  seatbeltOffRate          String?
  speedingEventRate        String?
  distractionsRate         String?
  followingDistanceRate    String?
  signalViolationsRate     String?
  deliveryCompletionRate   String?
  deliveredAndRecieved     String?
  photoOnDelivery          String?
  customerDeliveryFeedback String?
  attendedDeliveryAccuracy Int?
  dnr                      Int?
  podOpps                  Int?
  ccOpps                   Int?

  // ADDITIONAL INFORMATION
  netradyne                Json?
  deliveryAssociate        Json?
  defects                  Json?
  hasManyAccidents         Json?
  belongsToTeam            Json?
  attendance               Json?
  productivity             Json?

  // RELATIONSHIPS
  driverId String
  driver   User @relation(fields: [driverId], references: [id])
  dspId    String
  dsp      Dsp @relation(fields: [dspId], references: [id])
}

/////////////////////////////////////
///                               ///
///         DEVICE MODEL          ///
///                               ///
/////////////////////////////////////
model Device {
  id                  Int @id @unique @default(autoincrement())
  createdAt           DateTime @default(now())
  number              String?
  name                String?
  type                String?
  deviceIndex         Int?

  dspId               String
  dsp                 Dsp @relation(fields: [dspId], references: [id])
  categoryId          String
  category            DeviceCategory @relation(fields: [categoryId], references: [id])
  driverShifts        DriverShift[]  
}

/////////////////////////////////////
///                               ///
///         DEVICE Category          ///
///                               ///
/////////////////////////////////////
model DeviceCategory {
  id                  Int @id @unique @default(autoincrement())
  createdAt           DateTime @default(now())
  number              String?
  name                String?
  type                String?
  deviceIndex         Int?

  dspId               String
  dsp                 Dsp @relation(fields: [dspId], references: [id])
}

/////////////////////////////////////
///                               ///
///             Shift             ///
///                               ///
/////////////////////////////////////
model Shift {
  id              String  @id @unique @default(uuid())
  date            String
  dateDsp         String @unique
  dspId           String
  dsp             Dsp     @relation(fields: [dspId], references: [id])
  shiftMessage    String
}

/////////////////////////////////////
///                               ///
///         Driver Shift          ///
///                               ///
/////////////////////////////////////
model DriverShift{
  id              String  @id @unique @default(uuid())
  date            String
  dateDriver      String @unique
  userId          String
  user            User @relation(fields: [userId], references: [id])
  devices         Device[]
}

/////////////////////////////////////
///                               ///
///           Chatroom            ///
///                               ///
/////////////////////////////////////

model Chatroom {
  id                    String        @id @unique @default(uuid())
  createdAt             DateTime      @default(now())

  chatroomName          String
  chatroomOwnerId       String
  chatroomOwner         User @relation(fields: [chatroomOwnerId], references: [id], name: "chatOwner") 
  announcementChat      Boolean @default(false)

  driverJoinOnSignUp    Boolean @default(false)
  managerJoinOnSignUp   Boolean @default(true) 
  
  guests                User[] @relation("guests")
  messages              Messages[]
  announcementMessages  AnnouncementMessages[]

  notifications         Notifications[]
}

/////////////////////////////////////
///                               ///
///           Messages            ///
///                               ///
/////////////////////////////////////

model Messages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  content    String
  sentAt     String?
  from       Json
  visable    Boolean @default(true)
  reported   Boolean @default(false)
  reportedBy Json?

  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  userId     String
  user       User @relation(fields: [userId], references: [id])
}

/////////////////////////////////////
///                               ///
///     Announcement Message      ///
///                               ///
/////////////////////////////////////
model AnnouncementMessages {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  sentAt      String

  content     String
  from        Json
  readBy      User[]  @relation("announcementsRead")

  chatroomId  String
  chatroom    Chatroom @relation(fields: [chatroomId], references: [id])
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

/////////////////////////////////////
///                               ///
///       Notified Message        ///
///                               ///
/////////////////////////////////////
model NotifiedMessages {
  id        Int      @id @default(autoincrement())
  createdAt String
  sentAt    String
  date      String
  read      Boolean  @default(false)
  readAt    String   
  content   String
  from      String
  type      String
  driverId  String?
  driver    User?  @relation(fields: [driverId], references: [id])
  dspId     String?
  dsp       Dsp?    @relation(fields: [dspId], references: [id])
}

model Notifications {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  sentAt    String  
  date      String
  content   String
  
  chatId    String?
  chatroom  Chatroom?  @relation(fields: [chatId], references: [id])

}
/////////////////////////////////////
///                               ///
///           Accident            ///
///                               ///
/////////////////////////////////////

model Accident {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  name      String
  date      String
  time      String
  location  String

  accident_report            Json?
  police_report              Json?
  before_accident_report     Json?
  selfDamage                 Json?
  weather_and_distractions   Json?

  deleted Boolean @default(false)
  filled  Boolean @default(false)

  driverId            String
  driver              User              @relation(fields: [driverId], references: [id])
  collisionAccidents  CollisionAccident[]
  propertyAccidents   PropertyAccident[]
  injuryAccidents     InjuryAccident[]
  selfInjuryAccidents SelfInjuryAccident[]
  dspId               String
  dsp                 Dsp                 @relation(fields: [dspId], references: [id])
}
    ///////////////////////
    // Property Accident //
    ///////////////////////
    model PropertyAccident {
      id                  String @id @unique @default(uuid())
      contact_info        Json
      damage_report       Json
      defective_equip     Json
      safety_equip        Json
      package_report      Json?
      specific_pictures   Json
      extra_info          String?
      types_of_damage     Json

      accidentId        String
      accident          Accident  @relation(fields: [accidentId], references: [id])
    }
    ////////////////////////
    // Collision Accident //
    ////////////////////////
    model CollisionAccident {
      id                String @id @unique @default(uuid())
      specific_pictures Json
      contact_info      Json
      extra_info        String?
      collision_report  Json

      accidentId        String
      accident          Accident  @relation(fields: [accidentId], references: [id])
      injuryAccidents    InjuryAccident[]
    }

    ///////////////////////
    //  Injury Accident  //
    ///////////////////////
    model InjuryAccident {
      id                  String @id @unique @default(uuid())
      contact_info        Json
      extra_info          String?
      injured_areas       Json
      injury_report       Json
      pain_level          String
      specific_pictures   Json

      accidentId String
      accident   Accident @relation(fields: [accidentId], references: [id])
      collisionAccidentId String?
      collisionAccident   CollisionAccident? @relation(fields: [collisionAccidentId], references: [id])
    }

    //////////////////////////
    // Self Injury Accident //
    //////////////////////////
    model SelfInjuryAccident {
      id                  String @id @unique @default(uuid())
      animal_report       Json?
      injuries            Json
      injury_report       Json
      extra_info          String?
      specific_pictures   Json

      accidentId String
      accident   Accident @relation(fields: [accidentId], references: [id])
    }

enum Role {
  DRIVER
  MANAGER
  OWNER
  SUPERADMIN
}



