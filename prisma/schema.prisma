generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// FOR INTERNAL KING WILLY USE
model SuperUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role Role @default(SUPERADMIN)
  firstname String
  lastname String
  email String @unique
  password String
  phoneNumber String
}

model Owner {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role Role @default(ADMIN)
  firstname String
  lastname String
  email String @unique
  phoneNumber String
  password String
  profile_Pick Json?

  // ACCOUNT INFORMATION
  paid Boolean @default(false)  // Keeps track of the owner has paid 
  accountStanding String @default("Free") // Keeps track of the Owners Account Status
  locked Boolean @default(false) // Used to lock the Drivers Account if needed
  deleted Boolean @default(false) // Keeps track if the Admin account has been deleted

  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // RESET AND SIGNUP TOKEN
  resetPasswordToken String?
  resetPasswordTokenExpiration Int?
  signUpToken String? // Used for Driver/Admin signing up on the app

  // RELATIONSHIPS
  driver Driver[]
  admin Admin[]
  messages Messages[]
  notifiedMessages NotifiedMessages[]
  dsp Dsp?

}

model Admin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role Role @default(ADMIN)
  firstname String
  lastname String
  email String @unique
  phoneNumber String
  password String
  profile_Pick Json?

  // ACCOUNT INFORMATION
  accountStanding String @default("Free") // Keeps track of the Owners Account Status
  locked Boolean @default(false) // Used to lock the Admins Account if needed
  deleted Boolean @default(false) // Keeps track if the Admins Account has been deleted
  
  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // RESET AND SIGNUP TOKEN
  resetPasswordToken String?
  resetPasswordTokenExpiration Int?

  // RELATIONSHIPS
  ownerId Int
  owner Owner @relation(fields: [ownerId], references: [id])
  drivers Driver[]
  messages Messages[]
  notifiedMessages NotifiedMessages[] 
  dsp Dsp?
}

model Driver {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role Role @default(USER)
  firstname String
  lastname String
  email String @unique
  phoneNumber String
  password String
  profile_Pick Json?

  // DATA FROM SCORECARD TOOL
  rank  Json?
  employeeId String?
  tier Json?
  delivered Json?
  keyFocusArea Json?
  fico Json?
  seatbeltAndSpeeding Json?
  seatbeltOffRate Json?
  speedingEventRate Json?
  distractionsRate Json?
  followingDistanceRate Json?
  signalViolationsRate Json?
  deliveryCompletionRate Json?
  deliveredNotRecieved Json? // dnr
  photoOnDelivery Json? // pod_opps
  callCompliance Json? // cc_opps
  scanCompliance Json?
  attendedDeliveryAccuracy Json?

  // ADDITIONAL INFORMATION
  netradyne Json?
  deliveryAssociate Json?
  defects Json?
  customerDeliveryFeedback Json?
  hasManyAccidents Json?
  belongsToTeam Json?
  attendance Json?
  productivity Json?

  // NOTIFACTION SYSTEM
  notified Boolean @default(false)

  // ACCOUNT INFORMATION
  accountStanding String @default("Free") // Keeps track of the Owners Account Status
  locked Boolean @default(false) // Used to lock the Drivers Account if needed
  deleted Boolean @default(false) // Keeps track if the Drivers account has been deleted

  // RESET PASSWORD
  resetPasswordToken String?
  resetPasswordTokenExpiration Int?

  // RELATIONSHIPS
  ownerId Int
  owner Owner @relation(fields: [ownerId], references: [id])
  adminId Int
  admin Admin @relation(fields: [adminId], references: [id])
  accidents Accident[]
  messages Messages[]
  notifiedMessages NotifiedMessages[] 
  vehicle Vehicle?
  dsp Dsp?
}

model Dsp {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String @unique
  shortcode String @unique

  // DSP SETTINGS
  leaderBoardLimit Json
  ficoLimits Json
  seatbeltLimits Json
  speedingLimits Json
  distractionLimits Json
  followLimits Json
  signalLimits Json
  deliveryCompletionRateLimits Json
  scanComplianceLimits Json
  callComplianceLimits Json
  deliveryNotRecievedLimits Json
  photoOnDeliveryLimits Json

  // RELATIONSHIPS
  adminId Int
  admin Admin @relation(fields: [adminId], references: [id])
  driverId Int
  driver Driver @relation(fields: [driverId], references: [id])
  ownerId Int
  owner Owner @relation(fields: [ownerId], references: [id])
}

model Messages {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  content String
  from  String
  ownerId Int
  driverId Int
  adminId  Int
  owner Owner @relation(fields: [ownerId], references: [id])
  driver Driver @relation(fields: [driverId], references: [id])
  admin  Admin  @relation(fields: [adminId], references: [id])
}

model NotifiedMessages {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  read    Boolean @default(false)
  content String
  from    String
  type    String
  driverId Int?
  adminId  Int?
  ownerId Int
  owner Owner @relation(fields: [ownerId], references: [id])
  driver Driver? @relation(fields: [driverId], references: [id])
  admin  Admin?  @relation(fields: [adminId], references: [id])
}

model Vehicle {
  id Int @id @default(autoincrement())
  driverId Int
  driver Driver @relation(fields: [driverId], references: [id])
  vehicle_number String?
  amazon_logo String?
}

model Accident {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  driverId Int
  driver Driver @relation(fields: [driverId], references: [id])
  name String
  using_safety Boolean?
  safety_failed Boolean?
  number_package_carried Int?
  safety_equipment_used String?

  police_report_information Json?
  police_report_photos Json?
  vehicle_number String?
  amazon_logo Boolean?

  location String
  deleted Boolean @default(false)
  filled Boolean @default(false)

  hitPerson HitPerson[]
  collision Collision[]
  injuryAccident InjuryAccident[]
  propertyAccident PropertyAccident[]
  injuryReport InjuryReport[]
}

model HitPerson {
  id Int @id @default(autoincrement())
  accidentId Int
  accident Accident[] @relation(fields: [accidentId], references: [id])
  medical_attention Boolean
  vehicle_or_pedestrian String
  previous_damage String
  contact_infomation Json
  injury String

  deleted Boolean @default(false)

  accident_pictures Image[]
}

model Collision {
  id Int @id @default(autoincrement())
  accidentId Int
  accident Accident[] @relation(fields: [accidentId], references: [id])
  location String

  deleted Boolean @default(false)
}

model InjuryAccident {
  id Int @id @default(autoincrement())
  self_injured Boolean
  vehicle_number String
  amazon_logo Boolean
  exact_address String
  action_before_accident Json
  police_report Json
  weather String
  wet_ground Boolean
  slippery_ground Boolean
  extra_info String
  rushed_prior Boolean

  deleted Boolean @default(false)

  accident_pictures Image[]

  accidentId Int
  accident Accident[] @relation(fields: [accidentId], references: [id])
}

model PropertyAccident {
  id Int @id @default(autoincrement())
  self_injured Boolean
  vehicle_number String
  amazon_logo Boolean
  exact_address String
  action_before_accident Json
  police_report Json
  weather String
  wet_ground Boolean
  slippery_ground Boolean
  extra_info String
  rushed_prior Boolean

  deleted Boolean @default(false)

  accident_pictures Image[]

  accidentId Int
  accident Accident[] @relation(fields: [accidentId], references: [id])
}

model InjuryReport {
  id Int @id @default(autoincrement())
  immediate_attention Boolean
  late Json
  self_injured Boolean
  injury_type Json
  other_injured Boolean
  before_injury String
  packages Json
  safety_equipment Json
  unsafe_conditions Json
  pain_level Int
  additional_information String

  deleted Boolean @default(false)

  accidentId Int
  accident Accident[] @relation(fields: [accidentId], references: [id])
}

model Image {
  id Int @id @default(autoincrement())
  fieldname String
  path String
  mimetype String
  size Int
  originalname String
  encoding String
  destination String
  filename String

  injuryAccidentId Int
  injuryAccident InjuryAccident @relation(fields: [injuryAccidentId], references: [id])

  hitPersonId Int
  hitPerson HitPerson @relation(fields: [hitPersonId], references: [id])

  propertyAccidentId Int
  propertyAccident PropertyAccident @relation(fields: [propertyAccidentId], references: [id])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}